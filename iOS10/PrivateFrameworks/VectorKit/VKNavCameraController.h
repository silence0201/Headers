//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Aug 19 2016 22:08:00).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <VectorKit/VKCameraController.h>

#import <VectorKit/VKGesturingCameraController-Protocol.h>
#import <VectorKit/VKNavContextObserver-Protocol.h>
#import <VectorKit/VKNavigationCameraController-Protocol.h>

@class GEOMapRegion, GEORouteMatch, NSString, VKAttachedNavGestureCameraBehavior, VKDetachedNavGestureCameraBehavior, VKGestureCameraBehavior, VKMapCanvas, VKMapModel, VKNavContext, VKTimedAnimation;
@protocol VKNavCameraControllerObserver, VKNavGestureCameraBehavior;

__attribute__((visibility("hidden")))
@interface VKNavCameraController : VKCameraController <VKNavigationCameraController, VKGesturingCameraController, VKNavContextObserver>
{
    unsigned char _cameraType;
    unsigned char _headingType;
    Unit_3d259e8a _puckCourse;
    Matrix_2bdd42a3 _puckLocation;
    Unit_3d259e8a _headingDelta;
    Unit_3d259e8a _headingMinDelta;
    CameraFrame_e4e5578c _lastCalculatedCameraFrame;
    CameraFrame_e4e5578c _cameraFrame;
    _Bool _needsUpdate;
    struct Spring<double, md::SpringType::Linear> _pitchSpring;
    struct Spring<double, md::SpringType::Angular> _headingSpring;
    struct Spring<double, md::SpringType::Linear> _distanceFromTargetSpring;
    struct Spring<gm::Matrix<double, 2, 1>, md::SpringType::Linear> _screenPositionSpring;
    struct Unit<MeterUnitDescription, double> _cameraDistanceFromTarget;
    Unit_3d259e8a _cameraPitch;
    double _previousUpdateTime;
    double _maxZoomScale;
    double _minZoomScale;
    VKGestureCameraBehavior<VKNavGestureCameraBehavior> *_gestureBehavior;
    VKAttachedNavGestureCameraBehavior *_attachedGestureBehavior;
    VKDetachedNavGestureCameraBehavior *_detachedGestureBehavior;
    _Bool _isDetached;
    _Bool _panning;
    _Bool _rotating;
    _Bool _pitching;
    _Bool _zooming;
    VKTimedAnimation *_transitionAnimation;
    VKTimedAnimation *_snapPitchAnimation;
    VKTimedAnimation *_snapHeadingAnimation;
    CameraFrame_e4e5578c _transitionFrame;
    basic_string_805fe43b _currentStyleName;
    id <VKNavCameraControllerObserver> _observer;
    struct vector<geo::Mercator2<double>, std::__1::allocator<geo::Mercator2<double>>> _pointsToFrame;
    unsigned char _styleManeuversToFrame;
    unsigned char _maneuversToFrame;
    double _minCameraHeight;
    double _maxCameraHeight;
    Unit_3d259e8a _minCameraPitch;
    Unit_3d259e8a _maxCameraPitch;
    struct VKEdgeInsets _framingEdgeInset;
    struct VKEdgeInsets _framingEdgeInsetProportional;
    struct VKEdgeInsets _clientFramingInsets;
    Matrix_8746f91e _puckMovementBoundsMin;
    Matrix_8746f91e _puckMovementBoundsMax;
    Matrix_8746f91e _puckScreenPosition;
    double _minHeightDeltaChangeHorizontal;
    double _maxHeightDeltaChangeHorizontal;
    double _minHeightDeltaChangeVertical;
    double _maxHeightDeltaChangeVertical;
    double _halfPuckSize;
    Box_3d7e3c2c _viewableScreenRect;
    Box_3d7e3c2c _framingScreenRect;
    _Bool _enablePan;
    _Bool _enableZoom;
    _Bool _enablePitch;
    _Bool _enableRotate;
    float _panReturnDelayTime;
    unsigned char _alternateFramingSource;
    double _maxFramingDistance;
    double _framingDistanceAfterManeuver;
    VKNavContext *_navContext;
    GEORouteMatch *_routeMatch;
    _Bool _frameAllGroupedManeuvers;
    unsigned char _maxManeuversToFrame;
    _Bool _ignorePointsBehind;
    _Bool _insetsAnimating;
    Mercator2_57ec32b6 _routeFocusPoint;
    unsigned long long _lastTargetStyleIdentifier;
    double _desiredZoomScale;
    float _animationTime;
    _Bool _pouncing;
    _Bool _isTracking;
    VKMapModel *_mapModel;
    VKMapCanvas *_mapCanvas;
    long long _baseDisplayRate;
}

@property(nonatomic) long long baseDisplayRate; // @synthesize baseDisplayRate=_baseDisplayRate;
@property(nonatomic) struct VKEdgeInsets clientFramingInsets; // @synthesize clientFramingInsets=_clientFramingInsets;
@property(nonatomic) VKMapCanvas *mapCanvas; // @synthesize mapCanvas=_mapCanvas;
@property(retain, nonatomic) VKMapModel *mapModel; // @synthesize mapModel=_mapModel;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)canvasDidLayout;
- (void)setCamera:(id)arg1;
- (void)stopAnimations;
- (void)setCameraFrame:(CameraFrame_e4e5578c)arg1;
- (CameraFrame_e4e5578c)cameraFrame;
- (void)_snapHeading;
- (void)_snapPitch;
- (void)edgeInsetsDidEndAnimating;
- (void)edgeInsetsWillBeginAnimating;
- (Unit_3d259e8a)maxCameraPitch;
- (Unit_3d259e8a)minCameraPitch;
- (double)maxZoomHeight;
- (double)minZoomHeight;
- (double)maxZoomScale;
- (double)minZoomScale;
@property(nonatomic) double zoomScale;
- (void)_updateZoomScaleLimts;
- (void)_setNeedsUpdate;
- (void)navContextStateDidChange:(id)arg1;
- (void)updateSpringsForFramingCamera;
- (void)updatePointsToFrame;
- (void)updateManeuversToFrame;
- (Mercator2_57ec32b6)routeLocationAtDistance:(double)arg1;
- (Mercator2_57ec32b6)routeLocationAtDistance:(double)arg1 fromManeuver:(unsigned long long)arg2;
- (double)distanceToManeuver:(unsigned long long)arg1;
- (void)updateSpringsForTrackingCamera;
- (Box_3d7e3c2c)calculateViewableScreenRect;
- (Unit_3d259e8a)calculateHeading;
- (void)stop;
- (_Bool)isRotateEnabled;
- (_Bool)isPitchEnabled;
- (void)stopSnappingAnimations;
- (_Bool)_canZoomOut;
- (_Bool)canZoomOutForTileSize:(long long)arg1;
- (_Bool)_canZoomIn;
- (_Bool)canZoomInForTileSize:(long long)arg1;
- (double)topDownMinimumZoomLevel;
- (double)currentZoomLevel;
- (double)maximumZoomLevel;
- (double)minimumZoomLevel;
- (double)_normalizedZoomLevelForDisplayZoomLevel:(double)arg1;
- (_Bool)canEnter3DMode;
- (void)setNavContext:(id)arg1;
- (void)removeObserver;
- (void)setObserver:(id)arg1;
- (void)returnToPuck;
- (void)returnToTrackingWithDelay:(double)arg1 resetZoom:(_Bool)arg2;
- (void)animateCameraWithDuration:(float)arg1;
- (CameraFrame_e4e5578c)lerpCameraFrame:(const CameraFrame_e4e5578c *)arg1 two:(const CameraFrame_e4e5578c *)arg2 frac:(float)arg3;
- (CameraFrame_e4e5578c)restingCameraFrame;
- (CameraFrame_e4e5578c)currentCameraFrame;
@property(nonatomic) double pitch;
@property(nonatomic) double heading;
@property(readonly, nonatomic) double altitude;
@property(nonatomic) double distanceFromCenterCoordinate;
@property(nonatomic) CDStruct_c3b9c2ee centerCoordinate;
- (void)_updateStyles;
- (void)_updateSceneStyles;
- (void)stylesheetDidReload;
- (void)stylesheetDidChange;
- (_Bool)_updateSprings:(double)arg1;
- (Matrix_2bdd42a3)_calculatePuckScreenPoint;
- (Matrix_6e1d3589)_groundPointFromScreenPoint:(const Matrix_2bdd42a3 *)arg1 andFrame:(const CameraFrame_e4e5578c *)arg2;
- (void)_updateDebugOverlay;
- (void)_updateDebugText;
- (Matrix_2bdd42a3)worldPointToScreenPoint:(Matrix_6e1d3589)arg1 forViewProjectionMatrix:(const Matrix_08d701e4 *)arg2;
- (_Bool)_hasRunningAnimation;
- (void)updateWithTimestamp:(double)arg1;
- (void)resetSpringsToResting;
- (void)updateCameraState;
- (_Bool)wantsTimerTick;
- (void)puckAnimator:(id)arg1 updatedTargetPosition:(Matrix_6e1d3589)arg2;
- (void)puckAnimatorDidStop:(id)arg1;
- (void)_updateRouteMatch;
- (void)updateLocation:(const Mercator3_d8bb135c *)arg1 andCourse:(double)arg2;
- (void)puckAnimator:(id)arg1 updatedPosition:(const Mercator3_d8bb135c *)arg2 course:(double)arg3;
- (void)puckAnimator:(id)arg1 runAnimation:(id)arg2;
- (_Bool)isGesturing;
- (void)transferGestureState:(id)arg1;
- (void)stopPitchingWithFocusPoint:(struct CGPoint)arg1;
- (void)updatePitchWithFocusPoint:(struct CGPoint)arg1 translation:(double)arg2;
- (void)startPitchingWithFocusPoint:(struct CGPoint)arg1;
- (void)stopRotatingWithFocusPoint:(struct CGPoint)arg1;
- (void)updateRotationWithFocusPoint:(struct CGPoint)arg1 newValue:(double)arg2;
- (void)startRotatingWithFocusPoint:(struct CGPoint)arg1;
- (void)stopPanningAtPoint:(struct CGPoint)arg1;
- (void)updatePanWithTranslation:(struct CGPoint)arg1;
- (void)startPanningAtPoint:(struct CGPoint)arg1 panAtStartPoint:(_Bool)arg2;
- (void)stopPinchingWithFocusPoint:(struct CGPoint)arg1;
- (void)updatePinchWithFocusPoint:(struct CGPoint)arg1 oldFactor:(double)arg2 newFactor:(double)arg3;
- (void)startPinchingWithFocusPoint:(struct CGPoint)arg1;
- (void)zoom:(double)arg1 withFocusPoint:(struct CGPoint)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)_setDetached:(_Bool)arg1;
- (void)startWithPounce:(_Bool)arg1 startLocation:(CDStruct_c3b9c2ee)arg2 pounceCompletionHandler:(CDUnknownBlockType)arg3;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly, nonatomic) _Bool isFullyPitched;
@property(readonly, nonatomic) _Bool isPitched;
@property(readonly, nonatomic) _Bool isRotated;
@property(readonly, nonatomic) GEOMapRegion *mapRegion;
@property(readonly, nonatomic) double maxPitch;
@property(readonly) Class superclass;

@end

