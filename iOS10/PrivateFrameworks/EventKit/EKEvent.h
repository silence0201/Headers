//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Aug 19 2016 22:08:00).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <EventKit/EKCalendarItem.h>

@class EKCalendarDate, EKParticipant, EKStructuredLocation, NSArray, NSDate, NSNumber, NSString;

@interface EKEvent : EKCalendarItem
{
    EKStructuredLocation *_cachedLocationPrediction;
    NSDate *_cachedLocationPredictionExpirationDate;
    _Bool _locationPredictionFrozen;
    _Bool _occurrenceIsAllDay;
    _Bool _requiresDetachDueToSnoozedAlarm;
    EKCalendarDate *_occurrenceStartDate;
    EKCalendarDate *_occurrenceEndDate;
    EKCalendarDate *_originalOccurrenceStartDate;
    EKCalendarDate *_originalOccurrenceEndDate;
    NSNumber *_originalOccurrenceIsAllDay;
    NSString *_birthdayPersonUniqueID;
    unsigned long long _cachedJunkStatus;
}

+ (long long)_eventAvailabilityForParticipantStatus:(long long)arg1 supportedEventAvailabilities:(unsigned long long)arg2 isAllDayEvent:(_Bool)arg3;
+ (id)eventWithEventStore:(id)arg1;
@property(nonatomic) unsigned long long cachedJunkStatus; // @synthesize cachedJunkStatus=_cachedJunkStatus;
@property(readonly, nonatomic) NSString *birthdayPersonUniqueID; // @synthesize birthdayPersonUniqueID=_birthdayPersonUniqueID;
@property(nonatomic) _Bool requiresDetachDueToSnoozedAlarm; // @synthesize requiresDetachDueToSnoozedAlarm=_requiresDetachDueToSnoozedAlarm;
@property(copy, nonatomic) NSNumber *originalOccurrenceIsAllDay; // @synthesize originalOccurrenceIsAllDay=_originalOccurrenceIsAllDay;
@property(copy, nonatomic) EKCalendarDate *originalOccurrenceEndDate; // @synthesize originalOccurrenceEndDate=_originalOccurrenceEndDate;
@property(copy, nonatomic) EKCalendarDate *originalOccurrenceStartDate; // @synthesize originalOccurrenceStartDate=_originalOccurrenceStartDate;
@property(nonatomic) _Bool occurrenceIsAllDay; // @synthesize occurrenceIsAllDay=_occurrenceIsAllDay;
@property(copy, nonatomic) EKCalendarDate *occurrenceEndDate; // @synthesize occurrenceEndDate=_occurrenceEndDate;
@property(copy, nonatomic) EKCalendarDate *occurrenceStartDate; // @synthesize occurrenceStartDate=_occurrenceStartDate;
- (void).cxx_destruct;
- (void)updateWithGeocodedMapItemAndSaveWithCommit:(id)arg1 eventStore:(id)arg2 error:(id *)arg3;
- (id)scanForConflicts;
- (_Bool)_fetchedEventIsConflict:(id)arg1 forStartDate:(id)arg2 endDate:(id)arg3;
- (_Bool)updateEventToEvent:(id)arg1;
- (void)setSuggestionInfo:(id)arg1;
- (id)suggestionInfo;
- (id)_suggestedEventInfoRelation;
- (id)privacyLevelString;
- (void)_detachWithStartDate:(id)arg1 newStartDate:(id)arg2 future:(_Bool)arg3;
- (void)rebaseWithOldPCI:(id)arg1 newPCI:(id)arg2;
- (_Bool)_noRemainingEarlierOccurrences;
- (_Bool)_eventIsTheOnlyRemainingOccurrence;
- (_Bool)removeWithSpan:(long long)arg1 error:(id *)arg2;
- (_Bool)_isInitialOccurrenceDate:(id)arg1;
- (void)_cancelDetachedEventsWithSpan:(long long)arg1;
- (_Bool)_cancelWithSpan:(long long)arg1 error:(id *)arg2;
- (void)_deleteThisOccurrence;
- (_Bool)_deleteWithSpan:(long long)arg1 error:(id *)arg2;
- (_Bool)_shouldDeclineInsteadOfDelete;
- (_Bool)_shouldCancelInsteadOfDeleteWithSpan:(long long)arg1;
- (_Bool)_isSimpleRepeatingEvent;
- (_Bool)allowsSpansOtherThanThisEvent;
- (_Bool)conformsToRecurrenceRules:(id)arg1;
- (_Bool)_checkStartDateConstraintAgainstDate:(CDStruct_79f9e052)arg1 timeZone:(id)arg2 error:(id *)arg3;
- (_Bool)_occurrenceExistsOnDate:(double)arg1 timeZone:(id)arg2;
- (_Bool)_validateAlarmIntervalConstrainedToRecurrenceInterval:(long long)arg1;
- (_Bool)_validateDurationConstrainedToRecurrenceInterval;
- (_Bool)_validateDatesAndRecurrencesGivenSpan:(long long)arg1 error:(id *)arg2;
- (_Bool)validateRecurrenceRule:(id)arg1 error:(id *)arg2;
- (_Bool)hasAttendeeProposedTimes;
- (id)_dateForNextOccurrence;
- (void)rollback;
- (void)revert;
- (void)reset;
- (void)didCommit;
- (id)dirtyPropertiesToSkip;
- (_Bool)commitWithSpan:(long long)arg1 error:(id *)arg2;
- (_Bool)validateWithSpan:(long long)arg1 error:(id *)arg2;
- (void)snoozeAlarm:(id)arg1 withTimeIntervalFromNow:(double)arg2;
- (_Bool)refresh;
- (id)description;
- (_Bool)canBeRespondedTo;
- (_Bool)allowsAlarmModifications;
- (_Bool)hasSelfAttendee;
- (_Bool)allowsAvailabilityModifications;
- (id)uniqueId;
- (id)participationStatusModifiedDate;
- (long long)pendingParticipationStatus;
- (_Bool)supportsJunkReporting;
- (id)sendersEmail;
- (void)setJunkStatus:(unsigned long long)arg1;
- (unsigned long long)junkStatus;
- (_Bool)travelAdvisoryBehaviorIsEffectivelyEnabled;
- (void)setTravelAdvisoryBehavior:(long long)arg1;
- (long long)travelAdvisoryBehavior;
- (_Bool)eligibleForTravelAdvisories;
- (_Bool)automaticLocationGeocodingAllowed;
- (_Bool)changingAllDayPropertyIsAllowed;
- (_Bool)canDetachSingleOccurrence;
- (_Bool)requiresDetach;
- (_Bool)responseMustApplyToAll;
- (_Bool)allowsCalendarModifications;
- (_Bool)allowsRecurrenceModifications;
- (_Bool)isEditable;
@property(readonly, nonatomic) _Bool isDetached;
- (long long)compareStartDateIncludingTravelWithEvent:(id)arg1;
- (long long)compareStartDateWithEvent:(id)arg1;
- (_Bool)canMoveToCalendar:(id)arg1 fromCalendar:(id)arg2 error:(id *)arg3;
- (_Bool)isTentative;
- (void)setPredictedLocationFrozen:(_Bool)arg1;
- (_Bool)isPredictedLocationFrozen;
- (_Bool)hasPredictedLocation;
- (void)rejectPredictedLocation;
- (void)confirmPredictedLocation:(id)arg1;
- (id)locationWithoutPrediction;
- (id)preferredLocationWithoutPrediction;
- (void)_clearLocationPredictionCacheIfNotFrozen;
- (void)_updatePredictedLocationCacheIfNeeded;
@property(copy, nonatomic) EKStructuredLocation *structuredLocation; // @dynamic structuredLocation;
- (id)structuredLocationWithoutPrediction;
- (void)setLocation:(id)arg1;
- (_Bool)allowsProposedTimeModifications;
- (_Bool)serverSupportedProposeNewTime;
- (_Bool)canForward;
- (_Bool)attendeeReplyChanged;
- (_Bool)locationChanged;
- (_Bool)titleChanged;
- (_Bool)timeChanged;
- (_Bool)dateChanged;
- (_Bool)locationIsAConferenceRoom;
- (void)setPrivacyLevel:(long long)arg1;
- (long long)privacyLevel;
- (_Bool)allowsPrivacyLevelModifications;
- (_Bool)allowsTravelTimeModifications;
- (_Bool)allowsAttendeesModifications;
- (long long)travelRoutingMode;
- (void)setProposedStartDate:(id)arg1;
- (id)proposedStartDate;
- (id)actualProposedStartDate;
- (void)setTravelTime:(double)arg1;
- (double)travelTime;
- (id)startDateIncludingTravel;
- (id)_travelTimeInternalDescription;
- (void)clearInvitationStatus;
- (void)setInvitationStatus:(unsigned long long)arg1;
- (unsigned long long)invitationStatus;
- (void)setResponseComment:(id)arg1;
- (id)responseComment;
@property(nonatomic) long long availability;
- (id)startDateForRecurrence;
- (void)setRecurrenceRule:(id)arg1;
- (id)recurrenceRule;
@property(readonly, nonatomic) NSString *birthdayContactIdentifier;
@property(readonly, nonatomic) long long birthdayPersonID;
- (long long)_parentParticipationStatus;
- (void)setParticipationStatus:(long long)arg1;
- (long long)participationStatus;
- (void)setFiredTTL:(_Bool)arg1;
- (_Bool)firedTTL;
- (void)setLocationPredictionState:(long long)arg1;
- (long long)locationPredictionState;
- (void)setNeedsOccurrenceCacheUpdate:(_Bool)arg1;
- (_Bool)needsOccurrenceCacheUpdate;
@property(readonly, nonatomic) long long status;
- (CDStruct_79f9e052)endDatePinnedForAllDay;
- (CDStruct_79f9e052)startDatePinnedForAllDay;
- (CDStruct_79f9e052)endDateGr;
- (CDStruct_79f9e052)startDateGr;
- (CDStruct_79f9e052)_gregorianDateCorrectedForTimeZoneFromCalendarDate:(id)arg1 orNSDate:(id)arg2;
- (id)initialEndDate;
@property(readonly, nonatomic) NSDate *occurrenceDate;
- (id)initialStartDate;
- (id)_effectiveTimeZone;
- (void)setTimeZone:(id)arg1;
@property(copy, nonatomic) NSDate *endDate;
- (id)endCalendarDate;
- (double)durationIncludingTravel;
- (double)duration;
- (void)_setStartDate:(id)arg1 andClearProposedTimes:(_Bool)arg2;
- (void)overrideStartDate:(id)arg1;
@property(copy, nonatomic) NSDate *startDate;
- (id)startCalendarDate;
- (id)startCalendarDateIncludingTravelTime;
@property(nonatomic, getter=isAllDay) _Bool allDay;
- (_Bool)_isAllDay;
- (id)title;
- (void)setTitle:(id)arg1;
- (id)committedValueForKey:(id)arg1;
- (void)_sendModifiedNote;
- (_Bool)isAllDayDirty;
- (_Bool)isEndDateDirty;
- (_Bool)isStartDateDirty;
- (_Bool)isStatusDirty;
- (unsigned long long)hash;
- (_Bool)isEqual:(id)arg1;
- (id)eventStore;
- (id)externalURL;
- (id)externalURI;
@property(readonly, nonatomic) NSString *eventIdentifier;
- (void)dealloc;
- (id)_persistentEvent;
- (id)initWithPersistentObject:(id)arg1 occurrenceDate:(id)arg2;
- (id)initWithPersistentObject:(id)arg1;
- (id)initWithEventStore:(id)arg1;
- (id)init;
- (_Bool)couldBeJunk;
- (void)setIsJunk:(_Bool)arg1 shouldSave:(_Bool)arg2;

// Remaining properties
@property(retain) NSArray *attachments; // @dynamic attachments;
@property(readonly, nonatomic) EKParticipant *organizer; // @dynamic organizer;

@end

