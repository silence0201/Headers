//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Aug 19 2016 22:08:00).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import <SpringBoardFoundation/SBFAuthenticationStatusProvider-Protocol.h>
#import <SpringBoardFoundation/SBFMobileKeyBagObserver-Protocol.h>
#import <SpringBoardFoundation/SBFPasscodeFieldChangeObserver-Protocol.h>
#import <SpringBoardFoundation/SBFUserAuthenticationModelDelegate-Protocol.h>

@class NSData, NSDate, NSHashTable, NSMutableArray, NSString, PCPersistentTimer, SBFAuthenticationAssertion, SBFAuthenticationAssertionManager, SBFMobileKeyBag;
@protocol SBFAuthenticationPolicy, SBFUserAuthenticationModel;

@interface SBFUserAuthenticationController : NSObject <SBFMobileKeyBagObserver, SBFUserAuthenticationModelDelegate, SBFAuthenticationStatusProvider, SBFPasscodeFieldChangeObserver>
{
    SBFMobileKeyBag *_keybag;
    NSMutableArray *_responders;
    NSHashTable *_observers;
    id <SBFUserAuthenticationModel> _model;
    long long _authenticationState;
    NSDate *_lastRevokedAuthenticationDate;
    _Bool _hasPasscodeSet;
    SBFAuthenticationAssertionManager *_assertionManager;
    id <SBFAuthenticationPolicy> _policy;
    NSData *_lastIncorrectPasscodeAttempt;
    SBFAuthenticationAssertion *_transientAuthCheckingAssertion;
    struct __CFRunLoopObserver *_runLoopObserver;
    PCPersistentTimer *_unblockTimer;
    _Bool _lastAuthStateWasAuthenticated;
    _Bool _shouldFetchAuthenticationState;
    _Bool _inSecureMode;
    _Bool _okToSendNotifications;
    _Bool _hasBeenAuthenticatedOnceSinceBoot;
}

+ (_Bool)_isInGracePeriodState;
+ (_Bool)_isInBioUnlockState;
+ (long long)_extendedKeybagState;
@property(nonatomic, getter=_hasBeenAuthenticatedOnceSinceBoot, setter=_setHasBeenAuthenticatedOnceSinceBoot:) _Bool hasBeenAuthenticatedOnceSinceBoot; // @synthesize hasBeenAuthenticatedOnceSinceBoot=_hasBeenAuthenticatedOnceSinceBoot;
@property(nonatomic, getter=_okToSendNotifications, setter=_setOkToSendNotifications:) _Bool okToSendNotifications; // @synthesize okToSendNotifications=_okToSendNotifications;
@property(nonatomic, getter=_isInSecureMode, setter=_setInSecureMode:) _Bool inSecureMode; // @synthesize inSecureMode=_inSecureMode;
@property(nonatomic, getter=_shouldFetchAuthenticationState, setter=_setShouldFetchAuthenticationState:) _Bool shouldFetchAuthenticationState; // @synthesize shouldFetchAuthenticationState=_shouldFetchAuthenticationState;
@property(nonatomic, getter=_lastAuthStateWasAuthenticated, setter=_setLastAuthStateWasAuthenticated:) _Bool lastAuthStateWasAuthenticated; // @synthesize lastAuthStateWasAuthenticated=_lastAuthStateWasAuthenticated;
@property(nonatomic, getter=_authenticationState, setter=_setAuthenticationState:) long long authenticationState; // @synthesize authenticationState=_authenticationState;
@property(retain, nonatomic, getter=_unblockTimer, setter=_setUnblockTimer:) PCPersistentTimer *unblockTimer; // @synthesize unblockTimer=_unblockTimer;
@property(nonatomic, getter=_runLoopObserver, setter=_setRunLoopObserver:) struct __CFRunLoopObserver *runLoopObserver; // @synthesize runLoopObserver=_runLoopObserver;
@property(retain, nonatomic, getter=_responders, setter=_setResponders:) NSMutableArray *responders; // @synthesize responders=_responders;
@property(retain, nonatomic, getter=_model, setter=_setModel:) id <SBFUserAuthenticationModel> model; // @synthesize model=_model;
@property(retain, nonatomic, getter=_transientAuthCheckingAssertion, setter=_setTransietAuthCheckingAssertion:) SBFAuthenticationAssertion *transientAuthCheckingAssertion; // @synthesize transientAuthCheckingAssertion=_transientAuthCheckingAssertion;
@property(retain, nonatomic, getter=_assertionManager, setter=_setAssertionManager:) SBFAuthenticationAssertionManager *assertionManager; // @synthesize assertionManager=_assertionManager;
@property(retain, nonatomic, getter=_lastIncorrectPasscodeAttempt, setter=_setLastIncorrectPasscodeAttempt:) NSData *lastIncorrectPasscodeAttempt; // @synthesize lastIncorrectPasscodeAttempt=_lastIncorrectPasscodeAttempt;
@property(retain, nonatomic, getter=_policy, setter=_setPolicy:) id <SBFAuthenticationPolicy> policy; // @synthesize policy=_policy;
@property(nonatomic) _Bool hasPasscodeSet; // @synthesize hasPasscodeSet=_hasPasscodeSet;
@property(readonly, nonatomic) NSDate *lastRevokedAuthenticationDate; // @synthesize lastRevokedAuthenticationDate=_lastRevokedAuthenticationDate;
@property(retain, nonatomic, getter=_observers, setter=_setObservers:) NSHashTable *observers; // @synthesize observers=_observers;
- (void).cxx_destruct;
- (void)keybag:(id)arg1 extendedStateDidChange:(id)arg2;
- (void)keybagDidUnlockForTheFirstTime:(id)arg1;
- (void)_removePrivateAuthenticationObserver:(id)arg1;
- (void)_addPrivateAuthenticationObserver:(id)arg1;
- (void)_removeAuthResponder:(id)arg1;
- (void)_addAsFirstResponder:(id)arg1;
- (void)_clearBlockedState;
- (void)_unblockTimerFired;
- (void)_clearUnblockTimer;
- (void)_scheduleUnblockTimer;
- (void)_revokeAuthenticationImmediately:(_Bool)arg1 forPublicReason:(id)arg2;
- (_Bool)_shouldRevokeAuthenticationNow;
- (void)_updateAuthenticationStateImmediately:(_Bool)arg1 forPublicReason:(id)arg2;
- (void)_updateAuthenticationStateForPublicReason:(id)arg1;
- (void)_updateAuthenticationStateAndFirstAuthenticationForLockState:(long long)arg1;
- (void)_updateAuthenticationStateAndDateForLockState:(id)arg1;
- (void)_initializeAuthenticationStateAndDateForLockState:(long long)arg1;
- (void)_establishAuthenticationStateForInit:(long long)arg1;
- (void)_updateHasPasscodeSetForLockState:(long long)arg1;
- (void)_setSecureMode:(_Bool)arg1 postNotification:(_Bool)arg2;
- (void)_updateSecureModeIfNecessaryForNewAuthState;
- (void)_setAuthState:(long long)arg1;
- (void)_invalidateCachedPasscodeLockState;
- (void)_notifyOfAuthenticationSuccess;
- (void)_setup_runLoopObserverIfNecessary;
- (_Bool)_isUserAuthenticated;
- (_Bool)_authenticateWithPasscodeData:(id)arg1 outError:(id *)arg2;
- (_Bool)_performNilPasscodeCheck;
- (long long)_evaluateMesaAttempt:(id)arg1;
- (long long)_evaluatePasscodeAttempt:(id)arg1 outError:(id *)arg2;
- (long long)_evaluateAuthenticationAttempt:(id)arg1 outError:(id *)arg2;
- (double)_timeUntilUnblockedSinceReferenceDate;
- (_Bool)_isPermanentlyBlocked;
- (_Bool)_isTemporarilyBlocked;
- (void)_refreshModelCacheIfNeeded;
- (id)descriptionBuilderWithMultilinePrefix:(id)arg1;
- (id)descriptionWithMultilinePrefix:(id)arg1;
- (id)succinctDescriptionBuilder;
- (id)succinctDescription;
- (id)publicDescription;
- (void)deviceLockModelRequestsDeviceWipe:(id)arg1;
- (void)_notifyAboutTemporaryBlockStatusChanged;
- (void)deviceLockStateMayHaveChangedForModel:(id)arg1;
- (void)notePasscodeEntryCancelled;
- (void)notePasscodeEntryBegan;
- (_Bool)isAssertionValid:(id)arg1;
- (void)removeAuthenticationAssertion:(id)arg1;
- (void)addAuthenticationAssertion:(id)arg1;
- (void)revokeAuthenticationIfNecessaryForPublicReason:(id)arg1;
- (void)revokeAuthenticationImmediatelyIfNecessaryForPublicReason:(id)arg1;
- (void)revokeAuthenticationImmediatelyForPublicReason:(id)arg1;
- (_Bool)hasAuthenticatedAtLeastOnceSinceBoot;
- (_Bool)isAuthenticatedCached;
- (_Bool)isAuthenticated;
@property(readonly, copy) NSString *description;
- (void)_uncachePasscodeIfNecessary;
- (void)_setupPolicy:(id)arg1;
- (_Bool)_authenticateIfInGracePeriod;
- (_Bool)_boolForAuthenticationResult:(long long)arg1;
- (void)_handleInvalidAuthentication:(id)arg1 responder:(id)arg2;
- (void)_handleFailedAuthentication:(id)arg1 error:(id)arg2 responder:(id)arg3;
- (void)_handleSuccessfulAuthentication:(id)arg1 responder:(id)arg2;
- (void)_notifyClientsOfAuthenticationResult:(long long)arg1 forRequest:(id)arg2 error:(id)arg3 withResponder:(id)arg4;
- (_Bool)_processAuthenticationRequest:(id)arg1 responder:(id)arg2;
- (void)processAuthenticationRequest:(id)arg1;
- (void)processAuthenticationRequest:(id)arg1 responder:(id)arg2;
- (void)removeResponder:(id)arg1;
- (void)addAsFirstResponder:(id)arg1;
- (void)dealloc;
- (id)initWithAssertionManager:(id)arg1 policy:(id)arg2 keybag:(id)arg3 model:(id)arg4;
- (id)initWithAssertionManager:(id)arg1 policy:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

