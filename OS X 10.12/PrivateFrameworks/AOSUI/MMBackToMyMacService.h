//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Aug 19 2016 22:08:00).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <AOSUI/MMService.h>

#import <AOSUI/BTMMPasswordSheetDelegate-Protocol.h>
#import <AOSUI/MMTermsOfServiceControllerDelegate-Protocol.h>

@class MMBTMMPasswordSheet, MMNATPMP, MMTermsOfServiceController, NSArray, NSPopUpButton, NSString, NSTimer, NSWindow;

@interface MMBackToMyMacService : MMService <MMTermsOfServiceControllerDelegate, BTMMPasswordSheetDelegate>
{
    NSPopUpButton *toggle;
    struct __CFRunLoopSource *_dynamicStoreRLS;
    SEL _buttonActionTrampoline;
    NSArray *_errorQueue;
    NSString *_errorImageName;
    NSTimer *_statusTimer;
    NSTimer *_initializationTimer;
    MMNATPMP *_natpmpController;
    BOOL _ignoreNotifications;
    BOOL _isInitializing;
    BOOL _isABSRestarting;
    BOOL _hasEnergySaverWarning;
    BOOL _hasAttemptedUpdateCredential;
    NSWindow *_badDNSSheet;
    NSWindow *_doubleNATSheet;
    NSWindow *_firewallSheet;
    NSWindow *_natPMPSheet;
    NSWindow *_notInitializedSheet;
    NSWindow *_noRelayServerSheet;
    NSWindow *_noNATPMPSheet;
    NSWindow *_noAuthSheet;
    NSWindow *_sharingSheet;
    NSWindow *_wakeFromSleepSheet;
    MMBTMMPasswordSheet *_btmmPasswordSheet;
    MMTermsOfServiceController *_tosController;
}

+ (id)_errorWithDNSErrorCode:(int)arg1 forErrorDomain:(id)arg2;
@property(retain) MMTermsOfServiceController *tosController; // @synthesize tosController=_tosController;
@property(retain) MMBTMMPasswordSheet *btmmPasswordSheet; // @synthesize btmmPasswordSheet=_btmmPasswordSheet;
@property(retain) NSWindow *wakeFromSleepSheet; // @synthesize wakeFromSleepSheet=_wakeFromSleepSheet;
@property(retain) NSWindow *sharingSheet; // @synthesize sharingSheet=_sharingSheet;
@property(retain) NSWindow *notInitializedSheet; // @synthesize notInitializedSheet=_notInitializedSheet;
@property(retain) NSWindow *noRelayServerSheet; // @synthesize noRelayServerSheet=_noRelayServerSheet;
@property(retain) NSWindow *noNATPMPSheet; // @synthesize noNATPMPSheet=_noNATPMPSheet;
@property(retain) NSWindow *noAuthSheet; // @synthesize noAuthSheet=_noAuthSheet;
@property(retain) NSWindow *natPMPSheet; // @synthesize natPMPSheet=_natPMPSheet;
@property(retain) NSWindow *firewallSheet; // @synthesize firewallSheet=_firewallSheet;
@property(retain) NSWindow *doubleNATSheet; // @synthesize doubleNATSheet=_doubleNATSheet;
@property(retain) NSWindow *badDNSSheet; // @synthesize badDNSSheet=_badDNSSheet;
@property BOOL isABSRestarting; // @synthesize isABSRestarting=_isABSRestarting;
@property BOOL isInitializing; // @synthesize isInitializing=_isInitializing;
@property BOOL ignoreNotifications; // @synthesize ignoreNotifications=_ignoreNotifications;
@property(retain) NSTimer *initializationTimer; // @synthesize initializationTimer=_initializationTimer;
@property(retain) NSString *errorImageName; // @synthesize errorImageName=_errorImageName;
@property(retain) NSArray *errorQueue; // @synthesize errorQueue=_errorQueue;
@property SEL buttonActionTrampoline; // @synthesize buttonActionTrampoline=_buttonActionTrampoline;
- (id)_copyTermsOfServiceInfoForAccountID:(id)arg1 password:(id)arg2;
- (void)mmTermOfServiceControllerDidSucceed:(id)arg1;
- (void)mmTermOfServiceControllerDidCancel:(id)arg1;
- (void)_closeTermsOfServiceDialog;
- (void)_handleTermsOfServiceCancel:(id)arg1;
- (void)_handlePasswordError:(long long)arg1 forWindow:(id)arg2;
- (void)willUnselect;
- (void)willSelect;
- (void)showSheetForWindow:(id)arg1 title:(id)arg2 message:(id)arg3 defaultButtonTitle:(id)arg4 defaultKeyEquivalent:(id)arg5 alternateButtonTitle:(id)arg6 alternateKeyEquivalent:(id)arg7 otherButtonTitle:(id)arg8 otherKeyEquivalent:(id)arg9 icon:(id)arg10 andHelpHandler:(CDUnknownBlockType)arg11 completionHandler:(CDUnknownBlockType)arg12;
- (void)_showABSRestartingMessage;
- (void)openSecurityPreferences:(id)arg1;
- (void)openEnergySaverPreferences:(id)arg1;
- (void)openSharingPreferences:(id)arg1;
- (void)showNATPMPPrompt:(id)arg1;
- (void)launchNetworkDiagnostics:(id)arg1;
- (void)btmmPasswordSheetDidEnd:(id)arg1 returnCode:(long long)arg2;
- (void)showPasswordEntry:(id)arg1;
- (void)showWakeFromSleepSheet:(id)arg1;
- (void)showSharingSheet:(id)arg1;
- (void)showNotInitializedSheet:(id)arg1;
- (void)showNoRelayServerSheet:(id)arg1;
- (void)showNoNATPMPSheet:(id)arg1;
- (void)showNoAuthSheet:(id)arg1;
- (void)showNATPMPSheet:(id)arg1;
- (void)showFirewallSheet:(id)arg1;
- (void)showDoubleNATSheet:(id)arg1;
- (void)_showClientFailureSheet:(id)arg1 enabling:(BOOL)arg2;
- (void)showBadDNSSheet:(id)arg1;
- (void)_serviceFailed:(id)arg1;
- (BOOL)_isAllIncomingConnectionBlocked;
- (BOOL)_isScreenSharingEnabled;
- (BOOL)_isFileSharingEnabled;
- (void)_updatePowerManagementNotification:(id)arg1;
- (BOOL)_shouldShowWakeOnLAN;
- (BOOL)_needsPasswordRefresh;
- (void)fireUpdateStatus:(id)arg1;
- (void)_updateStatusTimer;
- (id)btmmStateDicts;
- (id)btmmMemberDomain;
- (id)btmmMemberStatusDict;
- (int)_dnsServiceStatusCode;
- (BOOL)_areDynamicStoreNotificationsEnabled;
- (void)_removeDynamicStoreNotifications;
- (void)_setupDynamicStoreNotifications;
- (void)_fireIntializationTimer:(id)arg1;
- (void)_destroyInitializationTimer;
- (void)_createInitializationTimer;
- (void)_createInitializationTimerWithTimeInternval:(double)arg1;
- (void)_updateUIWithError:(id)arg1;
- (id)_gatherStatus;
- (void)_updateStatus;
- (void)_servicePropertiesChanged:(id)arg1;
- (void)_stateChanged:(id)arg1;
- (id)_peekErrorFromDNSErrorQueue:(id)arg1;
- (BOOL)_isFakeDNSServiceErr:(id)arg1;
- (void)_setEnabled:(BOOL)arg1;
- (void)showMoreInfo:(id)arg1;
- (void)setEnabled:(BOOL)arg1 creating:(BOOL)arg2 withWindow:(id)arg3;
- (BOOL)willEnableDataclass;
- (id)icon;
- (void)invalidateService;
- (void)finalize;
- (void)dealloc;
- (id)initWithServiceID:(id)arg1 forAccount:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

