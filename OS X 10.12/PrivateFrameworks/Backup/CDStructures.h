//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Aug 19 2016 22:08:00).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

@class BU_ButtonController, BU_DPRemoteDesktopPicture, BU_TBUStarfieldShadowLayer, BU_TNotificationCenterObserverGlue, BU_TValidatingDateFormatter, CABackdropLayer, CALayer, NSArray, NSDate, NSDateComponents, NSObject, NSTimer;

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct BUTimelinePrivate {
    struct TNSRef<id<BUStarfieldTimelineDataSource>, void> _field1;
    struct TNSRef<id<BUStarfieldTimelineDelegate>, void> _field2;
    struct TNSRef<BU_TMTimeline *, void> _field3;
    id _field4;
    id _field5;
};

struct CGColor;

struct CGColorSpace;

struct CGImage;

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct IPrefsObserver {
    CDUnknownFunctionPointerType *_field1;
    struct TNSRef<BU_TPrefsObserverBridge *, void> _field2;
};

struct OpaqueNodeRef;

struct TBackupController {
    struct TTimeMachineTargetList _field1;
    struct TNSRef<BU_TBackupWindow *, void> _field2;
    struct TNSRef<BU_TBackupView *, void> _field3;
    struct TNSRef<NSMutableDictionary *, void> _field4;
};

struct TBackupLayerList {
    struct TNSRef<BU_TBackupLayer *, void> *_field1;
    struct TNSRef<BU_TBackupLayer *, void> *_field2;
    struct __compressed_pair<TNSRef<BU_TBackupLayer *, void>*, std::__1::allocator<TNSRef<BU_TBackupLayer *, void>>> {
        struct TNSRef<BU_TBackupLayer *, void> *_field1;
    } _field3;
};

struct TDate {
    double _field1;
};

struct TEase {
    double _field1;
    double _field2;
};

struct TFCGImage {
    struct TRef<CGImage *, TRetainReleasePolicy<CGImageRef>> _field1;
};

struct TFENode {
    struct OpaqueNodeRef *_field1;
};

struct TNSRef<BU_ButtonController *, void> {
    BU_ButtonController *fRef;
};

struct TNSRef<BU_DPRemoteDesktopPicture *, void> {
    BU_DPRemoteDesktopPicture *fRef;
};

struct TNSRef<BU_TBUStarfieldShadowLayer *, void> {
    BU_TBUStarfieldShadowLayer *fRef;
};

struct TNSRef<BU_TBackupLayer *, void>;

struct TNSRef<BU_TBackupView *, void> {
    id _field1;
};

struct TNSRef<BU_TBackupWindow *, void> {
    id _field1;
};

struct TNSRef<BU_TMTimeline *, void> {
    id _field1;
};

struct TNSRef<BU_TNotificationCenterObserverGlue *, void> {
    BU_TNotificationCenterObserverGlue *fRef;
};

struct TNSRef<BU_TPrefsObserverBridge *, void> {
    id _field1;
};

struct TNSRef<BU_TValidatingDateFormatter *, void> {
    BU_TValidatingDateFormatter *fRef;
};

struct TNSRef<CABackdropLayer *, void> {
    CABackdropLayer *fRef;
};

struct TNSRef<CALayer *, void> {
    CALayer *fRef;
};

struct TNSRef<NSArray *, void> {
    NSArray *fRef;
};

struct TNSRef<NSDate *, void> {
    NSDate *fRef;
};

struct TNSRef<NSDateComponents *, void> {
    NSDateComponents *fRef;
};

struct TNSRef<NSMutableDictionary *, void> {
    id _field1;
};

struct TNSRef<NSTimer *, void> {
    NSTimer *fRef;
};

struct TNSRef<id<BUStarfieldTimelineDataSource>, void> {
    id _field1;
};

struct TNSRef<id<BUStarfieldTimelineDelegate>, void> {
    id _field1;
};

struct TNSRef<id<BUStarfieldTimelineItem>, void> {
    id _field1;
};

struct TNotificationCenterObserver {
    NSObject *fObservedObject;
    struct TString fNotificationName;
    struct TNSRef<BU_TNotificationCenterObserverGlue *, void> fFunctorGlue;
    _Bool fIsDistributedObserving;
};

struct TRef<CGColor *, TRetainReleasePolicy<CGColorRef>> {
    struct CGColor *_field1;
};

struct TRef<CGColorSpace *, TRetainReleasePolicy<CGColorSpaceRef>> {
    struct CGColorSpace *_field1;
};

struct TRef<CGImage *, TRetainReleasePolicy<CGImageRef>> {
    struct CGImage *fRef;
};

struct TRef<NSObject<OS_dispatch_queue>*, TRetainReleasePolicy<dispatch_queue_t>> {
    NSObject *fRef;
};

struct TRef<TSnapshot *, TRetainReleasePolicy<TSnapshot *>> {
    struct TSnapshot *_field1;
};

struct TRef<TTimeMachineTarget *, TRetainReleasePolicy<TTimeMachineTarget *>> {
    struct TTimeMachineTarget *fRef;
};

struct TRef<__CFDictionary *, TRetainReleasePolicy<CFMutableDictionaryRef>> {
    struct __CFDictionary *_field1;
};

struct TRef<const __CFString *, TRetainReleasePolicy<CFStringRef>> {
    struct __CFString *fRef;
};

struct TRef<const void *, TRetainReleasePolicy<CFTypeRef>> {
    void *_field1;
};

struct TSnapshot {
    CDUnknownFunctionPointerType *_field1;
    int _field2;
    struct TFENode _field3;
    struct TDate _field4;
    struct TDate _field5;
    struct TFENode _field6;
    unsigned long long _field7;
    _Bool _field8;
    _Bool _field9;
    _Bool _field10;
    _Bool _field11;
};

struct TString {
    struct TRef<const __CFString *, TRetainReleasePolicy<CFStringRef>> fString;
};

struct TTimeMachineTarget {
    CDUnknownFunctionPointerType *_field1;
    int _field2;
    _Bool _field3;
    struct TFENode _field4;
    struct TString _field5;
    struct TRef<TSnapshot *, TRetainReleasePolicy<TSnapshot *>> _field6;
    struct TRef<const void *, TRetainReleasePolicy<CFTypeRef>> _field7;
    struct TNSRef<id<BUStarfieldTimelineItem>, void> _field8;
};

struct TTimeMachineTargetList {
    struct TRef<TTimeMachineTarget *, TRetainReleasePolicy<TTimeMachineTarget *>> *_field1;
    struct TRef<TTimeMachineTarget *, TRetainReleasePolicy<TTimeMachineTarget *>> *_field2;
    struct __compressed_pair<TRef<TTimeMachineTarget *, TRetainReleasePolicy<TTimeMachineTarget *>>*, std::__1::allocator<TRef<TTimeMachineTarget *, TRetainReleasePolicy<TTimeMachineTarget *>>>> {
        struct TRef<TTimeMachineTarget *, TRetainReleasePolicy<TTimeMachineTarget *>> *_field1;
    } _field3;
};

struct TTimelineControl {
    CDUnknownFunctionPointerType *_field1;
    _Bool _field2;
    _Bool _field3;
    id _field4;
    _Bool _field5;
    double _field6;
    double _field7;
    double _field8;
    double _field9;
    double _field10;
    struct TEase _field11;
    double _field12;
    struct TTimeMachineTargetList _field13;
    struct TRef<__CFDictionary *, TRetainReleasePolicy<CFMutableDictionaryRef>> _field14;
    int _field15;
    int _field16;
    struct TTimelineItem *_field17;
    struct TTimelineItem *_field18;
    struct vector<TTimelineItem *, std::__1::allocator<TTimelineItem *>> _field19;
    struct TRef<CGColor *, TRetainReleasePolicy<CGColorRef>> _field20;
    struct TRef<CGColor *, TRetainReleasePolicy<CGColorRef>> _field21;
    struct TRef<CGColor *, TRetainReleasePolicy<CGColorRef>> _field22;
    double _field23;
    double _field24;
    double _field25;
    double _field26;
    double _field27;
    struct TRef<CGColorSpace *, TRetainReleasePolicy<CGColorSpaceRef>> _field28;
    _Bool _field29;
    _Bool _field30;
    _Bool _field31;
    struct TNSRef<NSTimer *, void> _field32;
    struct TNSRef<NSTimer *, void> _field33;
    struct TNSRef<NSTimer *, void> _field34;
    struct TValidatorItem<TTimelineControl> _field35;
    id _field36;
};

struct TTimelineItem;

struct TValidatorItem<TTimelineControl> {
    long long _field1;
};

struct __hash_node<NSObject *, void *>;

struct __tree_end_node<std::__1::__tree_node_base<void *>*> {
    struct __tree_node_base<void *> *__left_;
};

struct callable_holder_base<void>;

struct function<NSComparisonResult (__kindof NSView *, __kindof NSView *)> {
    struct type __buf_;
    struct __base<NSComparisonResult (__kindof NSView *, __kindof NSView *)> *__f_;
};

struct function<void ()> {
    struct type __buf_;
    struct __base<void ()> *__f_;
};

struct function<void (NSAnimation *, float)> {
    struct type __buf_;
    struct __base<void (NSAnimation *, float)> *__f_;
};

struct function<void (NSDictionary<NSString *, NSObject *>*)> {
    struct type __buf_;
    struct __base<void (NSDictionary<NSString *, NSObject *>*)> *__f_;
};

struct function<void (NSNotification *)> {
    struct type __buf_;
    struct __base<void (NSNotification *)> *__f_;
};

struct set<TString, std::__1::less<TString>, std::__1::allocator<TString>> {
    struct __tree<TString, std::__1::less<TString>, std::__1::allocator<TString>> {
        struct __tree_node<TString, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<TString, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::less<TString>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct set<UDefaults::RegistryID, std::__1::less<UDefaults::RegistryID>, std::__1::allocator<UDefaults::RegistryID>> {
    struct __tree<UDefaults::RegistryID, std::__1::less<UDefaults::RegistryID>, std::__1::allocator<UDefaults::RegistryID>> {
        struct __tree_node<UDefaults::RegistryID, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<UDefaults::RegistryID, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::less<UDefaults::RegistryID>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct set<double, std::__1::less<double>, std::__1::allocator<double>> {
    struct __tree<double, std::__1::less<double>, std::__1::allocator<double>> {
        struct __tree_node<double, void *> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<double, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<double>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct type {
    unsigned char __lx[24];
};

struct unique_function<void ()> {
    struct unique_ptr<fstd::finder_callable_details::callable_holder_base<void>, std::__1::default_delete<fstd::finder_callable_details::callable_holder_base<void>>> fLambdaHolder;
};

struct unique_ptr<fstd::finder_callable_details::callable_holder_base<void>, std::__1::default_delete<fstd::finder_callable_details::callable_holder_base<void>>> {
    struct __compressed_pair<fstd::finder_callable_details::callable_holder_base<void>*, std::__1::default_delete<fstd::finder_callable_details::callable_holder_base<void>>> {
        struct callable_holder_base<void> *__first_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node<NSObject *, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<NSObject *, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<NSObject *, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<NSObject *, void *>*>>> {
        struct __hash_node<NSObject *, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<NSObject *, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<NSObject *, void *>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unordered_set<NSObject *, std::__1::hash<NSObject *>, std::__1::equal_to<NSObject *>, std::__1::allocator<NSObject *>> {
    struct __hash_table<NSObject *, std::__1::hash<NSObject *>, std::__1::equal_to<NSObject *>, std::__1::allocator<NSObject *>> {
        struct unique_ptr<std::__1::__hash_node<NSObject *, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<NSObject *, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<NSObject *, void *>*>, std::__1::allocator<std::__1::__hash_node<NSObject *, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<NSObject *, void *>*> {
                struct __hash_node<NSObject *, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::hash<NSObject *>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::equal_to<NSObject *>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct vector<CGRect, std::__1::allocator<CGRect>> {
    struct CGRect *__begin_;
    struct CGRect *__end_;
    struct __compressed_pair<CGRect *, std::__1::allocator<CGRect>> {
        struct CGRect *__first_;
    } __end_cap_;
};

struct vector<TNSRef<CALayer *, void>, std::__1::allocator<TNSRef<CALayer *, void>>> {
    struct TNSRef<CALayer *, void> *__begin_;
    struct TNSRef<CALayer *, void> *__end_;
    struct __compressed_pair<TNSRef<CALayer *, void>*, std::__1::allocator<TNSRef<CALayer *, void>>> {
        struct TNSRef<CALayer *, void> *__first_;
    } __end_cap_;
};

struct vector<TNotificationCenterObserver, std::__1::allocator<TNotificationCenterObserver>> {
    struct TNotificationCenterObserver *__begin_;
    struct TNotificationCenterObserver *__end_;
    struct __compressed_pair<TNotificationCenterObserver *, std::__1::allocator<TNotificationCenterObserver>> {
        struct TNotificationCenterObserver *__first_;
    } __end_cap_;
};

struct vector<TTimelineItem *, std::__1::allocator<TTimelineItem *>> {
    struct TTimelineItem **_field1;
    struct TTimelineItem **_field2;
    struct __compressed_pair<TTimelineItem **, std::__1::allocator<TTimelineItem *>> {
        struct TTimelineItem **_field1;
    } _field3;
};

#pragma mark Typedef'd Structures

// Template types
typedef struct function<NSComparisonResult (__kindof NSView *, __kindof NSView *)> {
    struct type __buf_;
    struct __base<NSComparisonResult (__kindof NSView *, __kindof NSView *)> *__f_;
} function_a298a8d2;

typedef struct function<void ()> {
    struct type __buf_;
    struct __base<void ()> *__f_;
} function_f9feaa7d;

typedef struct function<void (NSAnimation *, float)> {
    struct type __buf_;
    struct __base<void (NSAnimation *, float)> *__f_;
} function_721cd517;

typedef struct function<void (NSDictionary<NSString *, NSObject *>*)> {
    struct type __buf_;
    struct __base<void (NSDictionary<NSString *, NSObject *>*)> *__f_;
} function_0f2a703c;

typedef struct function<void (NSNotification *)> {
    struct type __buf_;
    struct __base<void (NSNotification *)> *__f_;
} function_5450a8ab;

typedef struct set<double, std::__1::less<double>, std::__1::allocator<double>> {
    struct __tree<double, std::__1::less<double>, std::__1::allocator<double>> {
        struct __tree_node<double, void *> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<double, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<double>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
} set_bb8d1d1f;

typedef struct unique_function<void ()> {
    struct unique_ptr<fstd::finder_callable_details::callable_holder_base<void>, std::__1::default_delete<fstd::finder_callable_details::callable_holder_base<void>>> fLambdaHolder;
} unique_function_acfb320d;

typedef struct unordered_set<NSObject *, std::__1::hash<NSObject *>, std::__1::equal_to<NSObject *>, std::__1::allocator<NSObject *>> {
    struct __hash_table<NSObject *, std::__1::hash<NSObject *>, std::__1::equal_to<NSObject *>, std::__1::allocator<NSObject *>> {
        struct unique_ptr<std::__1::__hash_node<NSObject *, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<NSObject *, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<NSObject *, void *>*>, std::__1::allocator<std::__1::__hash_node<NSObject *, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<NSObject *, void *>*> {
                struct __hash_node<NSObject *, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::hash<NSObject *>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::equal_to<NSObject *>> {
            float __first_;
        } __p3_;
    } __table_;
} unordered_set_1c20e8cc;

