//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Aug 19 2016 22:08:00).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Safari/WebContentController.h>

#import <Safari/AuthenticationSheetRequestDelegate-Protocol.h>
#import <Safari/AutoFillFunctionBarProviderDelegate-Protocol.h>
#import <Safari/DimmingViewDelegate-Protocol.h>
#import <Safari/ReaderActivationDelegate-Protocol.h>
#import <Safari/ReaderAvailabilityDelegate-Protocol.h>
#import <Safari/TabDialogPresenter-Protocol.h>
#import <Safari/WBSFluidProgressStateSource-Protocol.h>

@class AutoFillFunctionBarProvider, BackgroundLoad, BookmarksView, BookmarksViewController, BrowserTabPersistentState, BrowserTabViewItem, BrowserWindowController, ContinuousReadingListPageItem, ContinuousReadingListViewController, DefaultBrowserBanner, JavaScriptDialogSuppressionManager, NSArray, NSDictionary, NSHashTable, NSMutableArray, NSString, NSTimer, NSURL, NSView, NSWindow, PrivateBrowsingExplanationBanner, PromptToEnablePlugInBanner, ReadingListItem, ResponsiveDesignViewController, SearchableWKView, StartPageViewController, StatusMessage, TabContentView, TabDialogViewController, UnresponsiveWebProcessHandler, WBSFluidProgressState, WBSHistoryVisit, WBSMultiRoundAutoFillManager, WBSSameDocumentNavigationToHistoryVisitCorrelator, WebClipBanner, WebCrashBanner;

__attribute__((visibility("hidden")))
@interface BrowserContentViewControllerObjCAdapter : WebContentController <AutoFillFunctionBarProviderDelegate, AuthenticationSheetRequestDelegate, DimmingViewDelegate, ReaderActivationDelegate, ReaderAvailabilityDelegate, TabDialogPresenter, WBSFluidProgressStateSource>
{
    struct RefPtr<Safari::ReaderController> _readerController;
    BOOL _alwaysInitiateLoadsInContinuousModeUsingCurrentController;
    PrivateBrowsingExplanationBanner *_privateBrowsingExplanationBanner;
    DefaultBrowserBanner *_defaultBrowserBanner;
    WebCrashBanner *_webCrashBanner;
    WebClipBanner *_webClipBanner;
    NSURL *_navigationURLFromClientRedirect;
    BOOL _clientRedirectWasDoneDuringPageNavigation;
    int _webProcessID;
    unique_ptr_c6cdb193 _queuedNavigation;
    BOOL _shouldStayInContinuousModeOnNextNavigationToBackForwardListItem;
    int _loadingStatus;
    int _currentPageType;
    struct URLRequest _initialContents;
    BOOL _isBetweenSidebarAnimationInformationGatheringSteps;
    BOOL _waitingToForcePauseWebProcess;
    BOOL _waitingForWebProcessID;
    struct RefPtr<Safari::SheetRequest> _sheetRequest;
    BOOL _hasDisplayedValidURL;
    BOOL _hasDisplayedStartPage;
    int _expectedPageType;
    int _previousPageType;
    NSURL *_pendingBrowserInitiatedURL;
    NSString *_httpReferrerForFallbackURLs;
    unique_ptr_d9da4b2f _fallbackURLs;
    struct BackForwardListItem _previousItem;
    CDUnknownBlockType _completionHandlerForTryingToCloseBeforeCommittingToBackgroundLoad;
    struct Vector<Safari::WK::AuthenticationChallenge, 0, WTF::CrashOnOverflow, 16> _authenticationChallengeQueue;
    NSString *_committedEVCertificateOrganizationName;
    BOOL _safeBrowsingWarningIgnored;
    BOOL _isLoadingSafeBrowsingWarningPage;
    struct unique_ptr<Safari::SecurityInfo, std::__1::default_delete<Safari::SecurityInfo>> _securityInfo;
    unsigned long long _safeBrowsingCheckSeed;
    int _tabLabelLifetime;
    BOOL _shouldResetJavaScriptDialogSuppressionOnNextCommit;
    NSString *_internetAccountDomain;
    NSString *_internetAccountUsername;
    NSString *_internetAccountPassword;
    BOOL _readyToDisplayInternetAccountSetupPrompt;
    BOOL _shouldDisplayInternetAccountSetupPrompt;
    struct BackForwardListItem _searchResultsForSnapBack;
    ResponsiveDesignViewController *_responsiveDesignModeViewController;
    NSString *_userAgentBeforeResponsiveMode;
    struct RefPtr<Safari::FormCompletionController> _formCompletionController;
    unsigned long long _formTextStatusValidationRequestIdentifier;
    struct HashMap<Safari::WK::BackForwardListItem, WTF::RetainPtr<NSString>, Safari::WK::ObjectSubclassHash<Safari::WK::BackForwardListItem>, WTF::HashTraits<Safari::WK::BackForwardListItem>, WTF::HashTraits<WTF::RetainPtr<NSString>>> _backForwardItemToGeneratedPasswordMap;
    NSDictionary *_unsubmittedFormMetadata;
    NSDictionary *_unsubmittedPasswordGenerationCredentials;
    struct Frame _unsubmittedFormSourceFrame;
    struct HashSet<Safari::WK::Frame, Safari::WK::ObjectSubclassHash<Safari::WK::Frame>, WTF::HashTraits<Safari::WK::Frame>> _framesThatHaveBeenPrefilled;
    struct HashSet<Safari::WK::Frame, Safari::WK::ObjectSubclassHash<Safari::WK::Frame>, WTF::HashTraits<Safari::WK::Frame>> _framesThatHaveBeenAutoFilled;
    NSURL *_openSearchURLToProcessAfterBackgroundLoadIsCommitted;
    NSMutableArray *_pagePreviewHistoryOperations;
    NSTimer *_updateAudioUITimer;
    BOOL _shouldGoBackAfterBackgroundNavigationIsCommitted;
    NSHashTable *_spawnedTabsBrowserContentViewControllerObjCAdapters;
    struct HashSet<Safari::WK::BackForwardListItem, Safari::WK::ObjectSubclassHash<Safari::WK::BackForwardListItem>, WTF::HashTraits<Safari::WK::BackForwardListItem>> _invalidatedBackForwardItems;
    TabDialogViewController *_tabDialogViewController;
    PromptToEnablePlugInBanner *_promptToEnablePlugInBanner;
    BOOL _didShowManagePlugInPrompt;
    BOOL _didScheduleToShowPromptForClickToUsePlugInInParentTab;
    struct HashMap<Safari::WK::Frame, WTF::RetainPtr<WBSFormAutoFillMetadataCorrector>, Safari::WK::ObjectSubclassHash<Safari::WK::Frame>, WTF::HashTraits<Safari::WK::Frame>, WTF::HashTraits<WTF::RetainPtr<WBSFormAutoFillMetadataCorrector>>> _formAutoFillMetadataCorrectorsByFrame;
    AutoFillFunctionBarProvider *_autoFillFunctionBarProvider;
    BOOL _hasCheckedForPIPBeforePageUnloadForCurrentNavigation;
    BOOL _tryingToClose;
    BOOL _mainDocumentDidFirstLayout;
    BOOL _mainDocumentDidFirstVisuallyNonEmptyLayout;
    BOOL _mainDocumentDidLoad;
    BOOL _securePageHasInsecureContent;
    BOOL _webProcessForcePaused;
    BOOL _redirectOccurredWhileRecoveringFromWebProcessCrash;
    BOOL _mainFrameLoadEndedInError;
    BOOL _shouldDownloadNextPage;
    BOOL _tryingToCloseBeforeCommittingToBackgroundLoad;
    BOOL _extendedValidationCertificateOrganizationNameHasBeenDetermined;
    BOOL _showingSecurityWarningPage;
    BOOL _shouldStartEmpty;
    BOOL _shouldShowOriginalURLInsteadOfExpectedURLInUnifiedField;
    BOOL _windowFocusDisabled;
    BOOL _movingToAnotherWindow;
    BOOL _wasFormTextEdited;
    BOOL _meetsEditedFormTextWarningCriteria;
    BOOL _preFillFormWasDeferred;
    BOOL _suppressingBeforeUnloadPrompts;
    BOOL _readerShouldBeShownIfPossible;
    BOOL _readerViewStale;
    BOOL _playingMutableMedia;
    BOOL _showingWebGLPolicyDialog;
    BOOL _inContinuousMode;
    BOOL _blockedFromKeyViewLoop;
    BOOL _shouldHideTransientBannerOnNextUserInitiatedNavigation;
    BOOL _shouldHideTransientBannerOnVisuallyNonEmptyLayout;
    BOOL _waitingToContinueUserActivity;
    BOOL _suppressJavaScriptDialogPresentation;
    BOOL _showingPromptToUsePlugIn;
    BOOL _skipAnimationsWhenDismissingPendingTabDialogs;
    unsigned int _identifier;
    int _lastUsedStartPageMode;
    BookmarksViewController *_bookmarksViewController;
    struct BrowserContentViewController *_browserContentViewController;
    BrowserTabViewItem *_tabViewItem;
    NSString *_originalURLString;
    NSString *_provisionalOriginalURLString;
    CDUnknownBlockType _backgroundDocumentFirstVisuallyNonEmptyLayoutHandler;
    double _bestWidthForCurrentPage;
    BackgroundLoad *_backgroundNavigationBackgroundLoad;
    BrowserTabPersistentState *_pendingTabStateToRestore;
    WBSFluidProgressState *_fluidProgressState;
    WBSMultiRoundAutoFillManager *_multiRoundAutoFillManager;
    StatusMessage *_statusMessage;
    JavaScriptDialogSuppressionManager *_JavaScriptDialogSuppressionManager;
    WBSSameDocumentNavigationToHistoryVisitCorrelator *_sameDocumentNavigationToHistoryVisitCorrelator;
    WBSHistoryVisit *_lastVisit;
    BookmarksView *_bookmarksView;
    StartPageViewController *_startPageViewController;
    NSURL *_urlOfLoadingTopSite;
    NSDictionary *_initialReaderArticleScrollPositionAsDictionary;
    NSString *_requestedTabLabel;
    NSString *_provisionalTabLabel;
    NSString *_committedTabLabel;
    unsigned long long _mutableMediaState;
    long long _mutedState;
    BrowserTabViewItem *_parentTab;
    struct BackForwardListItem _backForwardListItemForReturningToParentTab;
    ReadingListItem *_currentlyLoadedReadingListItem;
    unsigned long long _currentlyLoadedReadingListItemPageNumber;
    NSURL *_webFeedURL;
    NSString *_webFeedTitle;
    NSArray *_siteIconURLs;
    ContinuousReadingListPageItem *_readingListPageItemToLoadInContinuousMode;
    UnresponsiveWebProcessHandler *_unresponsiveWebProcessHandler;
    BrowserContentViewControllerObjCAdapter *_originatingModalDialogContentViewController;
    BrowserContentViewControllerObjCAdapter *_blockingModalDialogContentViewController;
    Vector_81153489 _ancestorIdentifiers;
}

+ (id)javaScriptDialogTitleForSecurityOrigin:(const struct SecurityOrigin *)arg1;
+ (id)javaScriptDialogTitleForURL:(id)arg1;
+ (void)enumerateBrowserContentViewControllersSharingWebProcessWithPID:(int)arg1 skippingContentViewController:(id)arg2 usingBlock:(CDUnknownBlockType)arg3;
+ (id)findBrowserContentViewControllerForSafariPage:(id)arg1;
+ (id)findAutoSelectableBrowserContentViewControllerWithURL:(id)arg1 windowPolicy:(long long)arg2 tabPlacementHint:(const struct TabPlacementHint *)arg3;
@property(nonatomic) BOOL skipAnimationsWhenDismissingPendingTabDialogs; // @synthesize skipAnimationsWhenDismissingPendingTabDialogs=_skipAnimationsWhenDismissingPendingTabDialogs;
@property(nonatomic, getter=isShowingPromptToUsePlugIn) BOOL showingPromptToUsePlugIn; // @synthesize showingPromptToUsePlugIn=_showingPromptToUsePlugIn;
@property(nonatomic) __weak BrowserContentViewControllerObjCAdapter *blockingModalDialogContentViewController; // @synthesize blockingModalDialogContentViewController=_blockingModalDialogContentViewController;
@property(nonatomic) __weak BrowserContentViewControllerObjCAdapter *originatingModalDialogContentViewController; // @synthesize originatingModalDialogContentViewController=_originatingModalDialogContentViewController;
@property(nonatomic) BOOL suppressJavaScriptDialogPresentation; // @synthesize suppressJavaScriptDialogPresentation=_suppressJavaScriptDialogPresentation;
@property(readonly, nonatomic) WebClipBanner *webClipBanner; // @synthesize webClipBanner=_webClipBanner;
@property(nonatomic, getter=isWaitingToContinueUserActivity) BOOL waitingToContinueUserActivity; // @synthesize waitingToContinueUserActivity=_waitingToContinueUserActivity;
@property(readonly, nonatomic) PrivateBrowsingExplanationBanner *privateBrowsingExplanationBanner; // @synthesize privateBrowsingExplanationBanner=_privateBrowsingExplanationBanner;
@property(nonatomic) BOOL shouldHideTransientBannerOnVisuallyNonEmptyLayout; // @synthesize shouldHideTransientBannerOnVisuallyNonEmptyLayout=_shouldHideTransientBannerOnVisuallyNonEmptyLayout;
@property(readonly, nonatomic) BOOL shouldHideTransientBannerOnNextUserInitiatedNavigation; // @synthesize shouldHideTransientBannerOnNextUserInitiatedNavigation=_shouldHideTransientBannerOnNextUserInitiatedNavigation;
@property(readonly, nonatomic) WebCrashBanner *webCrashBanner; // @synthesize webCrashBanner=_webCrashBanner;
@property(readonly, nonatomic) UnresponsiveWebProcessHandler *unresponsiveWebProcessHandler; // @synthesize unresponsiveWebProcessHandler=_unresponsiveWebProcessHandler;
@property(nonatomic, getter=isBlockedFromKeyViewLoop) BOOL blockedFromKeyViewLoop; // @synthesize blockedFromKeyViewLoop=_blockedFromKeyViewLoop;
@property(nonatomic) BOOL alwaysInitiateLoadsInContinuousModeUsingCurrentController; // @synthesize alwaysInitiateLoadsInContinuousModeUsingCurrentController=_alwaysInitiateLoadsInContinuousModeUsingCurrentController;
@property(readonly, nonatomic) ContinuousReadingListPageItem *readingListPageItemToLoadInContinuousMode; // @synthesize readingListPageItemToLoadInContinuousMode=_readingListPageItemToLoadInContinuousMode;
@property(nonatomic, getter=isInContinuousMode) BOOL inContinuousMode; // @synthesize inContinuousMode=_inContinuousMode;
@property(copy, nonatomic) NSArray *siteIconURLs; // @synthesize siteIconURLs=_siteIconURLs;
@property(copy, nonatomic) NSString *webFeedTitle; // @synthesize webFeedTitle=_webFeedTitle;
@property(retain, nonatomic) NSURL *webFeedURL; // @synthesize webFeedURL=_webFeedURL;
@property(readonly, nonatomic) unsigned long long currentlyLoadedReadingListItemPageNumber; // @synthesize currentlyLoadedReadingListItemPageNumber=_currentlyLoadedReadingListItemPageNumber;
@property(readonly, nonatomic) ReadingListItem *currentlyLoadedReadingListItem; // @synthesize currentlyLoadedReadingListItem=_currentlyLoadedReadingListItem;
@property(nonatomic, getter=isShowingWebGLPolicyDialog) BOOL showingWebGLPolicyDialog; // @synthesize showingWebGLPolicyDialog=_showingWebGLPolicyDialog;
@property(nonatomic) struct BackForwardListItem backForwardListItemForReturningToParentTab; // @synthesize backForwardListItemForReturningToParentTab=_backForwardListItemForReturningToParentTab;
@property(readonly, nonatomic) __weak BrowserTabViewItem *parentTab; // @synthesize parentTab=_parentTab;
@property(nonatomic) long long mutedState; // @synthesize mutedState=_mutedState;
@property(readonly, nonatomic, getter=isPlayingMutableMedia) BOOL playingMutableMedia; // @synthesize playingMutableMedia=_playingMutableMedia;
@property(readonly, nonatomic) unsigned long long mutableMediaState; // @synthesize mutableMediaState=_mutableMediaState;
@property(copy, nonatomic, setter=_setCommittedTabLabel:) NSString *committedTabLabel; // @synthesize committedTabLabel=_committedTabLabel;
@property(copy, nonatomic) NSString *provisionalTabLabel; // @synthesize provisionalTabLabel=_provisionalTabLabel;
@property(copy, nonatomic) NSString *requestedTabLabel; // @synthesize requestedTabLabel=_requestedTabLabel;
@property(nonatomic, getter=isReaderViewStale) BOOL readerViewStale; // @synthesize readerViewStale=_readerViewStale;
@property(copy, nonatomic) NSDictionary *initialReaderArticleScrollPositionAsDictionary; // @synthesize initialReaderArticleScrollPositionAsDictionary=_initialReaderArticleScrollPositionAsDictionary;
@property(nonatomic) BOOL readerShouldBeShownIfPossible; // @synthesize readerShouldBeShownIfPossible=_readerShouldBeShownIfPossible;
@property(retain, nonatomic) NSURL *urlOfLoadingTopSite; // @synthesize urlOfLoadingTopSite=_urlOfLoadingTopSite;
@property(nonatomic) int lastUsedStartPageMode; // @synthesize lastUsedStartPageMode=_lastUsedStartPageMode;
@property(readonly, nonatomic) StartPageViewController *startPageViewController; // @synthesize startPageViewController=_startPageViewController;
@property(readonly, nonatomic) BookmarksView *bookmarksView; // @synthesize bookmarksView=_bookmarksView;
@property(retain, nonatomic) WBSHistoryVisit *lastVisit; // @synthesize lastVisit=_lastVisit;
@property(readonly, nonatomic) WBSSameDocumentNavigationToHistoryVisitCorrelator *sameDocumentNavigationToHistoryVisitCorrelator; // @synthesize sameDocumentNavigationToHistoryVisitCorrelator=_sameDocumentNavigationToHistoryVisitCorrelator;
@property(nonatomic, getter=isSuppressingBeforeUnloadPrompts) BOOL suppressingBeforeUnloadPrompts; // @synthesize suppressingBeforeUnloadPrompts=_suppressingBeforeUnloadPrompts;
@property(readonly, nonatomic) JavaScriptDialogSuppressionManager *JavaScriptDialogSuppressionManager; // @synthesize JavaScriptDialogSuppressionManager=_JavaScriptDialogSuppressionManager;
@property(retain, nonatomic, setter=_setStatusMessage:) StatusMessage *statusMessage; // @synthesize statusMessage=_statusMessage;
@property(nonatomic) BOOL preFillFormWasDeferred; // @synthesize preFillFormWasDeferred=_preFillFormWasDeferred;
@property(readonly, nonatomic) WBSMultiRoundAutoFillManager *multiRoundAutoFillManager; // @synthesize multiRoundAutoFillManager=_multiRoundAutoFillManager;
@property(readonly, nonatomic) BOOL meetsEditedFormTextWarningCriteria; // @synthesize meetsEditedFormTextWarningCriteria=_meetsEditedFormTextWarningCriteria;
@property(readonly, nonatomic) BOOL wasFormTextEdited; // @synthesize wasFormTextEdited=_wasFormTextEdited;
@property(readonly, nonatomic) WBSFluidProgressState *fluidProgressState; // @synthesize fluidProgressState=_fluidProgressState;
@property(nonatomic, getter=isMovingToAnotherWindow) BOOL movingToAnotherWindow; // @synthesize movingToAnotherWindow=_movingToAnotherWindow;
@property(nonatomic, getter=isWindowFocusDisabled) BOOL windowFocusDisabled; // @synthesize windowFocusDisabled=_windowFocusDisabled;
@property(nonatomic) BOOL shouldShowOriginalURLInsteadOfExpectedURLInUnifiedField; // @synthesize shouldShowOriginalURLInsteadOfExpectedURLInUnifiedField=_shouldShowOriginalURLInsteadOfExpectedURLInUnifiedField;
@property(nonatomic) BOOL shouldStartEmpty; // @synthesize shouldStartEmpty=_shouldStartEmpty;
@property(readonly, nonatomic, getter=isShowingSecurityWarningPage) BOOL showingSecurityWarningPage; // @synthesize showingSecurityWarningPage=_showingSecurityWarningPage;
@property(readonly, nonatomic) BrowserTabPersistentState *pendingTabStateToRestore; // @synthesize pendingTabStateToRestore=_pendingTabStateToRestore;
@property(readonly, nonatomic) BOOL extendedValidationCertificateOrganizationNameHasBeenDetermined; // @synthesize extendedValidationCertificateOrganizationNameHasBeenDetermined=_extendedValidationCertificateOrganizationNameHasBeenDetermined;
@property(readonly, nonatomic) __weak BackgroundLoad *backgroundNavigationBackgroundLoad; // @synthesize backgroundNavigationBackgroundLoad=_backgroundNavigationBackgroundLoad;
@property(nonatomic, getter=isTryingToCloseBeforeCommittingToBackgroundLoad) BOOL tryingToCloseBeforeCommittingToBackgroundLoad; // @synthesize tryingToCloseBeforeCommittingToBackgroundLoad=_tryingToCloseBeforeCommittingToBackgroundLoad;
@property(nonatomic, setter=_setShouldDownloadNextPage:) BOOL shouldDownloadNextPage; // @synthesize shouldDownloadNextPage=_shouldDownloadNextPage;
@property(nonatomic) BOOL mainFrameLoadEndedInError; // @synthesize mainFrameLoadEndedInError=_mainFrameLoadEndedInError;
@property(readonly, nonatomic) int loadingStatus; // @synthesize loadingStatus=_loadingStatus;
@property(nonatomic) BOOL redirectOccurredWhileRecoveringFromWebProcessCrash; // @synthesize redirectOccurredWhileRecoveringFromWebProcessCrash=_redirectOccurredWhileRecoveringFromWebProcessCrash;
@property(nonatomic, getter=isWebProcessForcePaused) BOOL webProcessForcePaused; // @synthesize webProcessForcePaused=_webProcessForcePaused;
@property(readonly, nonatomic) int webProcessID; // @synthesize webProcessID=_webProcessID;
@property(readonly, nonatomic) double bestWidthForCurrentPage; // @synthesize bestWidthForCurrentPage=_bestWidthForCurrentPage;
@property(nonatomic) BOOL securePageHasInsecureContent; // @synthesize securePageHasInsecureContent=_securePageHasInsecureContent;
@property(copy, nonatomic) CDUnknownBlockType backgroundDocumentFirstVisuallyNonEmptyLayoutHandler; // @synthesize backgroundDocumentFirstVisuallyNonEmptyLayoutHandler=_backgroundDocumentFirstVisuallyNonEmptyLayoutHandler;
@property(nonatomic) BOOL mainDocumentDidLoad; // @synthesize mainDocumentDidLoad=_mainDocumentDidLoad;
@property(nonatomic) BOOL mainDocumentDidFirstVisuallyNonEmptyLayout; // @synthesize mainDocumentDidFirstVisuallyNonEmptyLayout=_mainDocumentDidFirstVisuallyNonEmptyLayout;
@property(nonatomic) BOOL mainDocumentDidFirstLayout; // @synthesize mainDocumentDidFirstLayout=_mainDocumentDidFirstLayout;
@property(copy, nonatomic) NSString *provisionalOriginalURLString; // @synthesize provisionalOriginalURLString=_provisionalOriginalURLString;
@property(copy, nonatomic, setter=_setOriginalURLString:) NSString *originalURLString; // @synthesize originalURLString=_originalURLString;
@property(nonatomic) __weak BrowserTabViewItem *tabViewItem; // @synthesize tabViewItem=_tabViewItem;
@property(readonly, nonatomic) struct BrowserContentViewController *browserContentViewController; // @synthesize browserContentViewController=_browserContentViewController;
@property(readonly, nonatomic) Vector_81153489 ancestorIdentifiers; // @synthesize ancestorIdentifiers=_ancestorIdentifiers;
@property(readonly, nonatomic) unsigned int identifier; // @synthesize identifier=_identifier;
@property(nonatomic, getter=isTryingToClose) BOOL tryingToClose; // @synthesize tryingToClose=_tryingToClose;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_processOpenSearchURL:(id)arg1;
- (void)processOpenSearchURLAfterBackgroundLoadHasBeenCommittedIfNecessary;
- (void)didCollectOpenSearchURL:(id)arg1;
@property(readonly, nonatomic) TabDialogViewController *tabDialogViewController;
@property(readonly, nonatomic) BOOL isUnresponsiveDueToJavaScriptDialogRunningInProcess;
- (void)dismissSharedWebProcessJSDialogsIfNeeded;
- (void)showJavaScriptPromptWithMessage:(id)arg1 defaultResponse:(id)arg2 origin:(const struct SecurityOrigin *)arg3 responseHandler:(CDUnknownBlockType)arg4;
- (void)showJavaScriptConfirmWithMessage:(id)arg1 origin:(const struct SecurityOrigin *)arg2 responseHandler:(CDUnknownBlockType)arg3;
- (void)showJavaScriptAlertWithMessage:(id)arg1 origin:(const struct SecurityOrigin *)arg2 responseHandler:(CDUnknownBlockType)arg3;
@property(readonly, nonatomic, getter=isShowingTabDialog) BOOL showingTabDialog;
- (void)dismissTabDialog;
- (void)presentTabDialogWithConfiguration:(id)arg1 dismissalBlock:(CDUnknownBlockType)arg2 importance:(long long)arg3;
- (void)_didDismissTabDialogs;
- (void)dismissPendingJavaScriptDialogsIfNeeded;
- (void)didMouseUpOrPerformAccessibilityPressWithDimmingView:(id)arg1;
- (void)didDismissModalDialogContentViewController:(id)arg1;
- (void)didPresentModalDialogContentViewController:(id)arg1;
- (void)willPresentModalDialogContentViewController:(id)arg1;
- (void)_didReceiveNetworkChangeNotification:(id)arg1;
- (void)_stopObservingNetworkChangeNotifications;
- (void)_startObservingNetworkChangeNotifications;
- (void)_hideWebView;
- (void)_hideViewsOtherThan:(int)arg1;
- (void)clearSearchResultsForSnapBack;
- (void)setSearchResultsForSnapBackToCurrentPage;
- (void)snapBackToSearchResults;
@property(readonly, nonatomic) BOOL canSnapBackToSearchResults;
@property(readonly, nonatomic, getter=isShowingWelcomePage) BOOL showingWelcomePage;
- (void)didCollectWebClipPageSize:(struct CGSize)arg1 clipRect:(struct CGRect)arg2 clipSignature:(const struct Dictionary *)arg3;
- (void)hideWebClipBannerAnimated:(BOOL)arg1;
- (void)showWebClipBannerAnimated:(BOOL)arg1;
@property(readonly, nonatomic, getter=isShowingWebClipBanner) BOOL showingWebClipBanner;
@property(readonly, nonatomic) BOOL canCreateWebClip;
- (void)hideDefaultBrowserBannerAnimated:(BOOL)arg1;
- (void)showDefaultBrowserBannerAnimated:(BOOL)arg1;
@property(readonly, nonatomic, getter=isShowingDefaultBrowserBanner) BOOL showingDefaultBrowserBanner;
- (BOOL)_showPromptToManagePlugInInPrefsIfNeeded;
- (BOOL)showPromptToClickToUsePlugInInParentTabIfNecessaryWhenNavigatingToURL:(id)arg1;
- (BOOL)showUnavailablePlugInDialogWithPlugInBundleIdentifier:(id)arg1 plugInBundleVersion:(id)arg2 plugInName:(id)arg3 plugInUpdateIsAvailable:(BOOL)arg4 plugInURLString:(id)arg5 plugInPageAttributeURLString:(id)arg6 plugInMimeType:(id)arg7 plugInLoadPolicy:(unsigned int)arg8 pluginUnavailabilityReason:(unsigned int)arg9;
- (void)_hidePrivateBrowsingExplanationBannerAnimated:(BOOL)arg1;
- (void)showPrivateBrowsingExplanationBannerAnimated:(BOOL)arg1;
@property(readonly, nonatomic, getter=isShowingPrivateBrowsingExplanationBanner) BOOL showingPrivateBrowsingExplanationBanner;
- (void)_hideTransientBannerDueToUserInitiatedNavigationOrVisuallyNonEmptyLayout;
- (void)hideTransientBannerAnimated:(BOOL)arg1;
- (BOOL)_canShowWebCrashBanner;
- (void)hideWebCrashBannerAnimated:(BOOL)arg1;
- (void)showWebCrashBannerAnimated:(BOOL)arg1;
@property(readonly, nonatomic, getter=isShowingWebCrashBanner) BOOL showingWebCrashBanner;
@property(readonly, nonatomic) BOOL isShowingAnyBanner;
- (void)didCompleteAuthenticationSheetRequest:(struct AuthenticationSheetRequest *)arg1;
- (void)_displayInternetAccountSetupPromptIfAppropriate;
- (void)handleInternetAccountSetupForDomain:(id)arg1 shouldPrompt:(BOOL)arg2;
- (void)displayInternetAccountSetupPromptOnNextLoadForDomain:(id)arg1 username:(id)arg2 password:(id)arg3;
- (void)showResponsiveDesignView;
- (void)hideResponsiveDesignView;
@property(readonly, nonatomic) BOOL canShowResponsiveDesignView;
@property(readonly, nonatomic, getter=isShowingResponsiveDesignView) BOOL showingResponsiveDesignView;
- (void)viewSourceForFrame:(const struct Frame *)arg1;
- (void)viewMainFrameSource;
@property(readonly, nonatomic) BOOL canViewSource;
- (void)_installContinuousReadingListView;
- (void)mouseDidEnterOrLeaveSocialProfileButton:(BOOL)arg1;
- (void)mouseDidEnterOrLeaveRetweetButton:(BOOL)arg1;
- (void)didPressSocialProfileButtonInContinuousReadingViewBannerAtLocation:(unsigned long long)arg1;
- (void)didPressRetweetButtonInContinuousReadingViewBannerAtLocation:(unsigned long long)arg1;
- (void)saveContinuousReadingListItemForCurrentBackForwardItemIfNecessary:(id)arg1;
- (void)willReloadContinuousReadingViewPage;
- (void)loadReadingListItemInContinuousMode:(id)arg1;
@property(readonly, nonatomic) ContinuousReadingListViewController *continuousReadingListViewController;
- (void)didCollectWebFeedInformationForURL:(id)arg1 title:(id)arg2 iconURLStrings:(const struct Array *)arg3;
- (void)startReadingListAnimationsUsingHopAnimationStartPoint:(struct CGPoint)arg1;
- (void)startReadingListHopAnimationFromMouseLocation;
- (void)addReadingListItemFromMouseLocationWithTitle:(id)arg1 label:(id)arg2 URL:(id)arg3;
- (void)setCurrentlyLoadedReadingListItem:(id)arg1 pageNumber:(unsigned long long)arg2;
@property(readonly, nonatomic, getter=isShowingReadingListItemArchiveURL) BOOL showingReadingListItemArchiveURL;
@property(readonly, nonatomic, getter=isShowingReadingListItemArchive) BOOL showingReadingListItemArchive;
@property(readonly, nonatomic, getter=isCurrentPageLoadedFromReadingList) BOOL currentPageLoadedFromReadingList;
@property(readonly, nonatomic) BOOL canAddReadingListItem;
- (id)makeBookmark;
@property(readonly, nonatomic) NSString *titleForNewBookmark;
@property(readonly, nonatomic) NSURL *urlForNewBookmark;
- (BOOL)_canPerformAnySharingAction;
@property(readonly, nonatomic) BOOL canAddBookmark;
- (void)pinnedTabContentDidMoveFromBrowserTabViewItem:(id)arg1 toBrowserTabViewItem:(id)arg2;
- (void)browserWKViewDidMoveToNewWindow;
- (void)invalidateBackForwardHistoryItem:(const struct BackForwardListItem *)arg1;
- (void)willStartDownloadingURL:(id)arg1;
- (BOOL)shouldSpawnNewTabOnBrowserUIInitiatedNavigationFromPinnedTabWithDestinationURL:(id)arg1;
- (BOOL)shouldSpawnNewTabOnNavigationFromPinnedTabWithDestinationURL:(id)arg1;
- (void)transferStateFromBrowserContentViewControllerSpawnedFromPinnedTab:(id)arg1;
@property(readonly, nonatomic, getter=isDisposableAfterNavigation) BOOL disposableAfterNavigation;
- (void)pagePinnedStateDidChange;
- (void)_hideSnapshotView;
- (void)setUpSpawnedTabFromParentTab:(id)arg1 parentTabSnapshot:(id)arg2 snapshotImageScale:(double)arg3;
- (void)restoreParentTabSessionState;
- (void)_addSpawnedTabBrowserContentViewControllerObjCAdapter:(id)arg1;
- (void)_invalidatedBackForwardItemsDidChange;
- (BOOL)returnToParentTabIfNeededForNavigationToBackForwardListItem:(const struct BackForwardListItem *)arg1;
- (void)didOpenURLExternally;
- (void)didRemoveBackForwardHistoryItems:(const struct Array *)arg1;
- (BOOL)isValidBackForwardItem:(const struct BackForwardListItem *)arg1;
- (void)clearForwardHistory;
@property(readonly, nonatomic, getter=isNavigatingToSpawnedTabParentURL) BOOL navigatingToSpawnedTabParentURL;
- (void)disconnectParentTabFromSpawnedTabs;
- (BOOL)isValidBackHistoryItem:(const struct BackForwardListItem *)arg1;
- (void)prepareNavigationIfFirstNavigationInTabCreatedFromParentTab;
- (void)clearParentTabIfNecessary;
- (void)_removeSpawnedTabBrowserContentViewControllerObjCAdapter:(id)arg1;
- (void)clearParentTab;
- (BOOL)_returnToParentTabAndOptionallyCloseTab:(BOOL)arg1;
- (void)preparePageToReturnFromFullscreenToInline;
@property(readonly, nonatomic, getter=isPlayingVideoInPIP) BOOL playingVideoInPIP;
- (unsigned long long)_pageMutableMediaState;
- (void)_updateAudioUINow:(id)arg1;
- (void)_invalidateUpdateAudioUITimer;
- (void)notifyContentMediaPlayingStateChanged;
- (void)mutableMediaPlayingStateDidChange;
@property(readonly, nonatomic, getter=isMuted) BOOL muted;
- (void)updatePageMutedState;
- (void)createVisibleContentsSnapshotForSharingWithRequestIdentifier:(unsigned long long)arg1;
- (void)runJavaScript:(id)arg1 forSharingExtensionNamed:(id)arg2 requestIdentifier:(unsigned long long)arg3;
- (void)sharePageViaMail;
- (void)showSharingServicePickerAtBottomOfView:(id)arg1;
@property(readonly, nonatomic) BOOL canSharePage;
- (void)_updateTitlesInResponseToLabelChange;
- (id)_tabLabel;
- (id)computeTabLabel;
- (void)setRequestedTabLabel:(id)arg1 lifetime:(int)arg2;
- (void)commitAllPagePreviewHistoryOperations;
- (void)enqueuePagePreviewHistoryOperation:(id)arg1;
- (BOOL)hasFailedURL;
- (double)estimatedProgress;
- (id)progressState;
- (void)clearFluidProgressState;
- (BOOL)createFluidProgressState;
- (void)readerControllerDidBecomeUnavailableUnexpectedly:(const struct ReaderController *)arg1;
- (void)readerController:(const struct ReaderController *)arg1 didUpdateAvailability:(int)arg2;
- (void)readerControllerDidDeactivate:(const struct ReaderController *)arg1;
- (void)readerControllerWillDeactivate:(const struct ReaderController *)arg1;
- (void)readerControllerDidActivate:(const struct ReaderController *)arg1;
- (void)readerControllerWillActivate:(const struct ReaderController *)arg1;
- (BOOL)readerControllerShouldActivateUponDeterminingAvailability:(const struct ReaderController *)arg1;
- (id)installationTargetForReaderController:(const struct ReaderController *)arg1;
- (void)_pickCertificateForAuthenticationChallengeSheetDidEnd:(id)arg1 returnCode:(long long)arg2 contextInfo:(void *)arg3;
- (void)_continueHTTPSConnectionSheetDidEnd:(id)arg1 returnCode:(long long)arg2 contextInfo:(void *)arg3;
- (void)_continueHTTPSConnectionWithIdentitySheetDidEnd:(id)arg1 returnCode:(long long)arg2 contextInfo:(void *)arg3;
- (void)dismissReaderAppearanceCustomizationPopover;
- (void)deactivateReaderAfterAnimationWithDeactivationMode:(int)arg1;
- (void)deactivateReaderNowOnNavigation;
- (void)deactivateReaderNowFollowingAnimation;
- (void)readerDidResetJSForPotentialReactivationShouldCacheViewForReactivation:(BOOL)arg1;
- (void)didDetermineReaderAvailability:(BOOL)arg1;
- (void)createReaderControllerIfNeeded;
@property(readonly, nonatomic) struct ReaderController *readerController;
@property(readonly, nonatomic, getter=isShowingReader) BOOL showingReader;
- (void)_createStartPageViewControllerIfNeeded;
- (void)_showStartPageViewWithMode:(int)arg1;
- (void)_installStartPageFromCommittingLoadWithMode:(int)arg1;
- (void)_installStartPageWithMode:(int)arg1;
- (void)_hideStartPageView;
- (void)goToStartPageWithMode:(int)arg1;
@property(readonly, nonatomic) NSView *startPageView;
@property(readonly, nonatomic, getter=isShowingOrWillShowStartPageView) BOOL showingOrWillShowStartPageView;
@property(readonly, nonatomic, getter=isShowingStartPage) BOOL showingStartPage;
- (void)_createBookmarksViewControllerIfNeeded;
- (void)_showBookmarksViewWithCollection:(id)arg1;
- (void)_installBookmarksViewWithCollection:(id)arg1;
- (void)_hideBookmarksView;
- (void)_focusSearchFieldInBookmarksView;
- (void)exitBookmarks;
- (void)goToBookmarksCollection:(id)arg1;
@property(readonly, nonatomic, getter=isShowingBookmarks) BOOL showingBookmarks;
@property(readonly, nonatomic) BOOL canOpenBookmarksView;
@property(readonly, nonatomic) BookmarksViewController *bookmarksViewController; // @synthesize bookmarksViewController=_bookmarksViewController;
@property(readonly, nonatomic) BOOL currentPageHasJavaScriptDialogsSuppressed;
- (void)evaluateJavaScript:(id)arg1;
- (void)_completeSidebarAnimationIfNecessary;
- (void)didForceContentRepaintAndCollectPageLayoutInformationForSidebarAnimationAfterResize:(id)arg1;
- (void)didCollectPageLayoutInformationForSidebarAnimationBeforeResize;
- (RetainPtr_c27edd19)generateSnapshotFromWindowBackingStore;
- (void)clearAllStatus;
- (void)setStatusForMouseoverWithUserData:(const struct Type *)arg1 modifiers:(unsigned int)arg2;
- (void)_updateUnsubmittedFormDataInFrame:(const struct Frame *)arg1 formMetadata:(const struct Dictionary *)arg2;
- (void)_autocompleteInTextFieldInFrame:(const struct Frame *)arg1 textFieldMetaData:(const struct Dictionary *)arg2 formMetaData:(const struct Dictionary *)arg3;
- (BOOL)isTextFieldFocused;
- (void)functionBarProvider:(id)arg1 didSelectCompletionListItem:(struct CompletionListItem *)arg2;
- (void)showFunctionBarForProvider:(id)arg1;
- (void)hideFunctionBarForProvider:(id)arg1;
- (void)_createFormCompletionControllerAndFunctionBarProviderIfNeededForFrame:(const struct Frame *)arg1 textFieldMetadata:(const struct Dictionary *)arg2 formMetadata:(const struct Dictionary *)arg3;
- (void)_createAutoFillFunctionBarProviderIfNeeded;
- (void)_uninstallAlternativeWebViewFunctionBarProvider;
- (void)_installAlternativeWebViewFunctionBarProvider:(id)arg1;
- (void)_createFormCompletionControllerIfNeededForFrame:(const struct Frame *)arg1 textFieldMetadata:(const struct Dictionary *)arg2 formMetadata:(const struct Dictionary *)arg3;
- (void)_tearDownFormCompletionMachinery;
- (id)_correctMetadata:(id)arg1 forFormInFrame:(const struct Frame *)arg2;
- (id)_autoFillMetadataCorrectorForFrame:(const struct Frame *)arg1 createIfNeeded:(BOOL)arg2;
- (id)_metadataProviderForForms:(const struct Array *)arg1 inFrames:(const struct Array *)arg2;
- (void)didClearFormMetadataDueToLoadForFrameContainingFocusedTextField;
- (void)filledFormOrFieldWithFormMetadata:(const struct Dictionary *)arg1 withGeneratedPasswordInFrame:(const struct Frame *)arg2;
- (void)autoFilledFormWithMetadata:(const struct Dictionary *)arg1 inFrame:(const struct Frame *)arg2;
- (void)didReplaceFormFieldRangeAndSelectTailForTextFieldWithMetadata:(const struct Dictionary *)arg1 formMetadata:(const struct Dictionary *)arg2 inFrame:(const struct Frame *)arg3;
- (void)didCollectFormsMetadata:(const struct Array *)arg1 forSafeAutoFillConfirmationInFrames:(const struct Array *)arg2 contactProperty:(const struct String *)arg3 contactIdentifier:(const struct String *)arg4 contactLabel:(const struct String *)arg5;
- (void)didCollectFormsMetadata:(const struct Array *)arg1 afterPreFillingFormInFrames:(const struct Array *)arg2;
- (void)didCollectMetadataForPrefillingForm:(const struct Dictionary *)arg1 inFrames:(const struct Array *)arg2 metadataForAllForms:(const struct Array *)arg3 ancestorFramesOfFormToPreFill:(const struct Array *)arg4 isInitialCollectionAtPageLoad:(BOOL)arg5;
- (void)didCollectFormsMetadata:(const struct Array *)arg1 forManualAutoFillInFrames:(const struct Array *)arg2;
- (void)addressBookAutoFillableFieldBlurredInFrame:(const struct Frame *)arg1 textFieldMetadata:(const struct Dictionary *)arg2 formMetadata:(const struct Dictionary *)arg3;
- (void)addressBookAutoFillableFieldFocused:(const struct String *)arg1 textFieldMetadata:(const struct Dictionary *)arg2 formMetadata:(const struct Dictionary *)arg3 inFrame:(const struct Frame *)arg4;
- (void)manualAutoFillButtonClickedInAddressBookAutoFillableFieldMetadata:(const struct Dictionary *)arg1 formMetadata:(const struct Dictionary *)arg2 inFrame:(const struct Frame *)arg3;
- (void)manualAutoFillButtonClickedInPasswordFieldMetadata:(const struct Dictionary *)arg1 formMetadata:(const struct Dictionary *)arg2 inFrame:(const struct Frame *)arg3;
- (void)usernameFieldBlurredInFrame:(const struct Frame *)arg1 formMetadata:(const struct Dictionary *)arg2 usernameFieldMetadata:(const struct Dictionary *)arg3;
- (void)usernameFieldFocusedInFrame:(const struct Frame *)arg1 formMetadata:(const struct Dictionary *)arg2 usernameFieldMetadata:(const struct Dictionary *)arg3;
- (void)creditCardFieldBlurredInFrame:(const struct Frame *)arg1 formMetadata:(const struct Dictionary *)arg2 creditCardFieldMetadata:(const struct Dictionary *)arg3;
- (void)creditCardFieldFocusedInFrame:(const struct Frame *)arg1 formMetadata:(const struct Dictionary *)arg2 creditCardFieldMetadata:(const struct Dictionary *)arg3;
- (void)passwordFieldBlurredInFrame:(const struct Frame *)arg1 formMetadata:(const struct Dictionary *)arg2 passwordFieldMetadata:(const struct Dictionary *)arg3;
- (void)passwordFieldFocusedInFrame:(const struct Frame *)arg1 formMetadata:(const struct Dictionary *)arg2 passwordFieldMetadata:(const struct Dictionary *)arg3;
- (BOOL)hasFrameBeenAutoFilled:(const struct Frame *)arg1;
- (BOOL)hasFrameBeenPreFilled:(const struct Frame *)arg1;
- (void)preFillFormIfNecessary;
- (void)updateUnsubmittedPasswordGenerationCredentialsWithUsername:(id)arg1 suggestedPassword:(id)arg2;
- (void)didGeneratePassword:(id)arg1;
- (void)clearMultiRoundAutoFillManager;
- (void)dismissFormCompletionList;
- (void)autoFillWillStart;
- (void)autoFill;
@property(readonly, nonatomic) BOOL canAutoFill;
- (void)_clearCurrentUnsubmittedFormInformation;
- (void)_didVerifyEditedFormTextStatus;
- (void)_didEditFormText;
- (void)_passwordFieldTextDidChangeWithMetadata:(id)arg1;
- (void)textDidChangeInTextFieldDelayCompletedForTextFieldWithUniqueID:(const struct String *)arg1 inFrame:(const struct Frame *)arg2;
- (BOOL)shouldPerformActionInFormTextFieldWithMetadata:(const struct Dictionary *)arg1 formMetadata:(const struct Dictionary *)arg2 inFrame:(const struct Frame *)arg3 uncheckedActionType:(unsigned long long)arg4;
- (void)didCollectEditedFormTextStatusWithVerificationRequestIdentifier:(unsigned long long)arg1 meetsEditedFromTextWarningCriteria:(BOOL)arg2;
- (void)textDidChangeInTextFieldInTextFieldWithMetadata:(const struct Dictionary *)arg1 formMetadata:(const struct Dictionary *)arg2 inFrame:(const struct Frame *)arg3;
- (void)textFieldDidEndEditingInFrame:(const struct Frame *)arg1 formMetadata:(const struct Dictionary *)arg2 textFieldMetadata:(const struct Dictionary *)arg3;
- (void)textDidChangeInTextArea;
- (void)saveUnsubmittedFormDataFromRemovedFrameIfNecessaryInFrame:(const struct Frame *)arg1 sourceFrame:(const struct Frame *)arg2;
- (BOOL)shouldDeferLoadingWhileSavingFormDataInFrame:(const struct Frame *)arg1 sourceFrame:(const struct Frame *)arg2;
- (void)clearUnsubmittedInformationInFormWithID:(double)arg1 sourceFrame:(const struct Frame *)arg2;
- (void)warnAboutUnsavedCredentialsWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)resetEditedFormTextStatus;
- (void)confirmReloadingWithPIPIfNecessaryWithOption:(long long)arg1;
- (void)confirmReloadingWithEditedFormTextWithOption:(long long)arg1;
- (void)verifyEditedFormTextStatus;
@property(readonly, nonatomic) BOOL shouldWarnAboutUnsavedCredentials;
- (BOOL)_shouldReportProgressForCurrentURL;
- (BOOL)_isFluidProgressAnimating;
- (void)animateProgressForPreloadedDocument;
- (void)_allowUserToPickCertificateForAuthenticationChallenge:(const struct AuthenticationChallenge *)arg1;
- (void)_useClientCertificatesForAuthenticationChallenge:(const struct AuthenticationChallenge *)arg1;
- (void)_handleNextAuthenticationChallenge;
- (void)_continueAuthenticationChallenge:(const struct AuthenticationChallenge *)arg1 withCertificateIdentity:(struct OpaqueSecIdentityRef *)arg2;
- (void)forgetAllAuthenticationChallenges;
- (void)didReceiveAuthenticationChallenge:(const struct AuthenticationChallenge *)arg1;
- (BOOL)canAuthenticateAgainstProtectionSpace:(const struct ProtectionSpace *)arg1;
- (void)browserViewDidMoveToWindow;
- (void)browserViewWillMoveToWindow:(id)arg1;
- (void)bringTabAndWindowToFront;
- (void)pageDidScroll;
- (BOOL)willHandleEvent:(id)arg1;
@property(readonly, nonatomic) NSString *titleForUnifiedFieldURL;
@property(readonly, nonatomic) NSURL *unifiedFieldURL;
- (void)displayInitialContents;
- (struct URLRequest)initialContents;
- (void)setInitialContents:(const struct URLRequest *)arg1;
- (struct Frame)_printingMailingFrame;
- (void)printPageShowingPrintPanel:(BOOL)arg1;
- (void)_printOperationDidRun:(id)arg1 success:(BOOL)arg2 contextInfo:(void *)arg3;
- (void)_printFrame:(const struct Frame *)arg1 showingPrintPanel:(BOOL)arg2 waitUntilDone:(BOOL)arg3;
- (void)printFrame:(const struct Frame *)arg1 showingPrintPanel:(BOOL)arg2 waitUntilDone:(BOOL)arg3;
@property(readonly, nonatomic) NSString *titleOfPrintMenuItem;
- (void)clearIgnoredNavigationURL;
- (BOOL)historyClientShouldIgnoreNavigationToURL:(id)arg1;
- (BOOL)_isBackForwardListItemDisposable:(const struct BackForwardListItem *)arg1;
- (id)_previousBackForwardItemTitle;
- (struct BackForwardListItem *)_previousWebPageBackForwardListItem;
- (void)clearBackForwardList;
- (void)updateBackForwardReferencesFromBrowserContentViewControllerObjCAdapter:(id)arg1 oldBackForwardListItemsToNewBackForwardListItemsMap:(const HashMap_bb21a8a3 *)arg2;
- (void)backForwardListDidChange:(const struct Array *)arg1;
- (BOOL)shouldSaveBackForwardListItemInTabState:(const struct BackForwardListItem *)arg1;
- (id)displayTitleForBackForwardListItem:(const struct BackForwardListItem *)arg1 showURL:(BOOL)arg2;
- (void)willNavigateToBackForwardListItem:(const struct BackForwardListItem *)arg1;
- (void)goToBackForwardListItem:(const struct BackForwardListItem *)arg1;
@property(readonly, nonatomic, getter=isNavigatingToCachedPageInBackForwardList) BOOL navigatingToCachedPageInBackForwardList;
@property(readonly, nonatomic, getter=isNavigatingViaBackForwardList) BOOL navigatingViaBackForwardList;
@property(readonly, nonatomic) BOOL hasNonEmptyBackForwardList;
@property(readonly, nonatomic) struct BackForwardList backForwardList;
- (void)dismissContentRelativeChildWindows;
- (BOOL)_shouldDisplayRequestedSheet;
- (BOOL)_displayRequestedSheetNowIfAppropriate;
- (void)_setSheetRequest:(PassRefPtr_2d65b270)arg1;
- (struct SheetRequest *)_sheetRequest;
- (void)_sheetRequestConditionsChanged:(id)arg1;
- (void)_stopObservingNotificationsThatMightDisplayRequestedSheet;
- (void)_startObservingNotificationsThatMightDisplayRequestedSheet;
- (void)runAlertAsSheet:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (int)_computePageTypeFromURL:(id)arg1;
- (void)_updateCachedPageTypesAfterCommit;
- (void)_updateExpectedPageType;
- (BOOL)_isPageTypeSameAsPreviousPage;
- (BOOL)_mainContentViewDiffersFromPreviousPage;
@property(readonly, nonatomic, getter=isShowingInitialPage) BOOL showingInitialPage;
@property(readonly, nonatomic, getter=isShowingWebContent) BOOL showingWebContent;
@property(readonly, nonatomic, getter=isShowingWebArchive) BOOL showingWebArchive;
@property(readonly, nonatomic, getter=isShowingPDFDocument) BOOL showingPDFDocument;
@property(readonly, nonatomic, getter=isShowingSecurePage) BOOL showingSecurePage;
@property(readonly, nonatomic, getter=isShowingOtherPage) BOOL showingOtherPage;
@property(readonly, nonatomic, getter=isShowingLoadErrorPage) BOOL showingLoadErrorPage;
@property(readonly, nonatomic, getter=isShowingHTMLPage) BOOL showingHTMLPage;
@property(readonly, nonatomic, getter=isShowingExtensionPage) BOOL showingExtensionPage;
@property(readonly, nonatomic, getter=isShowingEmptyPage) BOOL showingEmptyPage;
@property(readonly, nonatomic, getter=isShowingWebView) BOOL showingWebView;
- (void)_removeQueuedNavigation;
- (void)_enqueueNavigation:(unique_ptr_c6cdb193)arg1;
- (void)goNowIfInQueue;
- (void)initiateEnqueuedNavigation;
- (void)clearQueuedNavigation:(struct QueuedNavigation *)arg1;
- (void)enqueueRestoredNavigation:(id)arg1;
- (void)enqueueGoToURLRequest:(const struct URLRequest *)arg1;
@property(readonly, nonatomic) struct QueuedNavigation *queuedNavigation;
@property(readonly, nonatomic) BOOL hasQueuedNavigation;
- (BOOL)_shouldDeferRestoreOfTabState:(id)arg1;
- (void)restoreTabIdentifiersWithPersistentTabState:(id)arg1;
- (void)enqueueRestoreBrowserTabPersistentState:(id)arg1;
- (void)restorePendingState;
- (int)_urlSecurityProviderForResult:(id)arg1;
- (int)_urlSecurityAssessmentForResult:(id)arg1;
- (void)_ignoreSafeBrowsingWarning;
- (void)_showSafeBrowsingWarningPage;
- (struct SecurityInfo *)_securityInfoCreatingIfAbsent:(BOOL)arg1;
- (void)responseToSafeBrowsingWarningSelected:(unsigned long long)arg1;
- (void)urlPassedSafeBrowsingCheckForURL:(id)arg1 canGoInCacheOrNot:(int)arg2;
- (void)urlCheckDidCompleteforURL:(id)arg1 withSecurityAssessment:(int)arg2 securityProvider:(int)arg3;
- (void)performSafeBrowsingCheckForURL:(id)arg1 frameType:(long long)arg2;
- (BOOL)_getCertificateErrorTitle:(id *)arg1 andMessage:(id *)arg2 forErrorCode:(int)arg3 host:(id)arg4 trustIncludesRevokedCertificate:(BOOL)arg5;
- (void)_logInvalidCertificateErrorWithErrorCode:(long long)arg1 trustIncludesRevokedCertificate:(BOOL)arg2;
- (BOOL)_handleCertificateError:(id)arg1 forPage:(const struct Page *)arg2;
- (id)_computeExtendedValidationCertificateOrganizationName;
- (void)locationChangeDoneForPage:(const struct Page *)arg1 frameType:(long long)arg2 pageLoadType:(int)arg3 error:(id)arg4;
- (id)extendedValidationCertificateOrganizationNameWK;
@property(copy, nonatomic) NSString *extendedValidationCertificateOrganizationName;
@property(readonly, nonatomic) NSArray *certificateChain;
@property(readonly, nonatomic, getter=isSecureEnoughToShowLock) BOOL secureEnoughToShowLock;
- (BOOL)dispatchBeforeNavigateEventForURL:(id)arg1;
- (void)confirmUnloadingPageWithPIPDuringNavigationWithCompletionHandler:(CDUnknownBlockType)arg1 isReload:(BOOL)arg2;
- (BOOL)shouldConfirmUnloadingPageWithPIPDuringNavigation;
- (void)goHome;
- (void)goForward;
- (void)goBack;
@property(readonly, nonatomic) BOOL canGoForward;
@property(readonly, nonatomic) BOOL canGoBack;
- (int)_computeErrorPageTemplateForError:(id)arg1;
- (id)_computeErrorPageMessageForError:(id)arg1;
- (id)_computeErrorPageTitleForError:(id)arg1;
- (void)_handleErrorForPage:(const struct Page *)arg1 frameType:(long long)arg2 pageLoadType:(int)arg3 error:(id)arg4 getIsTryingFallbackURLs:(char *)arg5;
- (void)commitOrCancelBackgroundNavigationLoadAsAppropriate;
- (void)cancelBackgroundNavigation;
- (id)startSpawnedTabBackgroundNavigationWithURL:(id)arg1 shouldGoBackAfterBackgroundNavigationIsCommitted:(BOOL)arg2;
- (void)triedToCloseBeforeCommittingToBackgroundLoadWithResult:(int)arg1;
- (BOOL)tryToCloseBeforeCommittingToBackgroundLoadWithDeferredCompletionHandler:(CDUnknownBlockType)arg1;
@property(readonly, nonatomic) BOOL isBackgroundLoadContentViewController;
@property(readonly, nonatomic) BackgroundLoad *backgroundLoad;
- (int)_computeLoadingStatus;
- (struct BrowserContentViewController *)_loadNextFallbackURL;
- (void)_clearFallbackURLs;
- (BOOL)_hasFallbackURLs;
- (void)_didStartBrowserInitiatedLoadUsingBackForwardList:(BOOL)arg1;
- (void)_stopLoadingPage;
- (struct BrowserContentViewController *)_loadURLRequest:(const struct URLRequest *)arg1 tabLabel:(id)arg2 lifetime:(int)arg3 allowJavaScript:(BOOL)arg4 waitInQueue:(BOOL)arg5 clearFallbackURLs:(BOOL)arg6;
- (void)restoreFromSessionStateData:(const struct Data *)arg1;
- (void)didCommitLoadForFrame:(const struct Frame *)arg1;
- (void)didFailProvisionalLoad;
- (void)sessionStateDidChange;
- (void)loadingStatusHasChanged;
- (void)reloadWithOption:(long long)arg1;
- (void)performReloadWithoutContentBlockers;
- (void)reloadWithoutContentBlockers;
- (void)reloadFromOrigin;
- (void)reloadIfShowingErrorPage;
- (void)reload;
- (void)stopLoading;
- (void)clearPendingBrowserInitiatedLoad;
- (struct BrowserContentViewController *)tryDownloadWithMultipleURLs:(unique_ptr_d9da4b2f)arg1 httpReferrer:(id)arg2;
- (struct BrowserContentViewController *)tryMultipleURLs:(unique_ptr_d9da4b2f)arg1 httpReferrer:(id)arg2;
- (void)reuseForURLRequest:(id)arg1;
- (void)loadURLRequest:(const struct URLRequest *)arg1 tabLabel:(id)arg2 lifetime:(int)arg3 allowJavaScript:(BOOL)arg4 waitInQueue:(BOOL)arg5;
- (void)loadURLTryingToReuseBackForwardItem:(id)arg1;
- (void)loadURLRequest:(const struct URLRequest *)arg1;
- (void)loadURLRequest:(const struct URLRequest *)arg1 tabLabel:(id)arg2;
- (void)loadURL:(id)arg1 tabLabel:(id)arg2 httpReferrer:(id)arg3;
- (void)loadURL:(id)arg1;
@property(readonly, nonatomic) BOOL canReload;
@property(readonly, nonatomic) BOOL isLoadingProvisionally;
@property(readonly, nonatomic) BOOL isLoadingOrWaitingToLoadPage;
@property(readonly, nonatomic) BOOL isLoadingSingleResource;
- (void)_terminateSafariFromWebProcessCrashIfNeededForError:(id)arg1;
- (void)_setWebProcessForcePaused:(BOOL)arg1;
- (void)_resetWebProcessID;
- (void)_fetchWebProcessIDIfNeeded;
- (void)_reloadAfterWebProcessExit;
- (void)didGetWebProcessID:(unsigned long long)arg1;
- (void)recoverFromWebProcessExit;
- (void)forceCrashWebProcess;
- (id)_displayNameForFileURL:(id)arg1;
- (id)_emptyPageName;
- (void)_currentURLHasChanged;
- (void)provisionalURLHasChanged;
- (void)pageTitleHasChanged;
- (void)didCalculateBestWidthForPage:(double)arg1;
- (void)calculateBestWidthForCurrentPage;
@property(readonly, nonatomic) NSURL *currentBackForwardItemURL;
@property(readonly, nonatomic) NSString *currentPageHostName;
@property(readonly, nonatomic) NSURL *failedOrCurrentURL;
@property(readonly, nonatomic) NSURL *failedURL;
@property(readonly, nonatomic) NSURL *expectedOrCurrentURL;
@property(readonly, nonatomic) NSURL *expectedURL;
@property(readonly, nonatomic) NSString *expectedOrCurrentOriginalURLString;
@property(readonly, nonatomic) NSString *displayName;
@property(readonly, nonatomic) NSString *pageName;
@property(readonly, nonatomic) NSString *currentPageTitle;
- (void)_installWebView;
- (void)_showWebView;
- (void)_updateWKViewLayoutModeForWindow:(id)arg1;
- (void)browserViewWillBeSwappedWithAnotherView;
- (void)updateWKViewLayoutMode;
- (void)disableFrameSizeUpdates;
- (void)enableFrameSizeUpdates;
@property(readonly, nonatomic) BOOL usesPrivateBrowsing;
@property(readonly, nonatomic) unsigned long long browsingMode;
@property(readonly, nonatomic) SearchableWKView *frontmostContentView;
@property(readonly, nonatomic) TabContentView *tabContentView;
@property(readonly, nonatomic) BrowserWindowController *browserWindowController;
@property(readonly, nonatomic) BOOL isDisposable;
@property(readonly, nonatomic) NSWindow *hostWindow;
- (BOOL)hasAncestorWithIdentifier:(unsigned int)arg1;
- (void)initializeAncestorIdentifiersWithParent:(id)arg1;
- (void)close;
- (void)invalidate;
- (void)transferStateFromBrowserContentViewController:(id)arg1;
- (id)initWithBrowserContentViewController:(struct BrowserContentViewController *)arg1;
- (id)initWithSearchableWebContentViewController:(struct SearchableWebContentViewController *)arg1;
- (BOOL)_isAutoSelectableWithURL:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

