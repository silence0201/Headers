//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Aug 19 2016 22:08:00).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Safari/WindowController.h>

#import <Safari/BackgroundLoadControllerDelegate-Protocol.h>
#import <Safari/BrowserContentLoaderDelegate-Protocol.h>
#import <Safari/BrowserWindowContentSplitViewControllerDelegate-Protocol.h>
#import <Safari/BrowserWindowDelegate-Protocol.h>
#import <Safari/CAAnimationDelegate-Protocol.h>
#import <Safari/Command1Through9Receiver-Protocol.h>
#import <Safari/FavoritesPickerVisibilityController-Protocol.h>
#import <Safari/FavoritesPickerVisibilityManagerDataSource-Protocol.h>
#import <Safari/FormTextStatusWatcherDelegate-Protocol.h>
#import <Safari/ImageHopAnimationDelegate-Protocol.h>
#import <Safari/NSMenuDelegate-Protocol.h>
#import <Safari/NSSplitViewDelegate-Protocol.h>
#import <Safari/NSTabViewDelegate-Protocol.h>
#import <Safari/OverlayStatusWindowDelegate-Protocol.h>
#import <Safari/ReopensAtLaunch-Protocol.h>
#import <Safari/SearchableWKViewPlaybackControlsPresenter-Protocol.h>
#import <Safari/TabBarViewDelegate-Protocol.h>
#import <Safari/TabDraggingWindowDestination-Protocol.h>
#import <Safari/ToolbarControllerDelegate-Protocol.h>
#import <Safari/UnifiedFieldDelegate-Protocol.h>
#import <Safari/VisualTabPickerDelegate-Protocol.h>
#import <Safari/WBSFluidProgressControllerWindowDelegate-Protocol.h>
#import <Safari/WBSFluidProgressRocketEffectDelegate-Protocol.h>
#import <Safari/WindowFunctionBarProviderDataSource-Protocol.h>
#import <Safari/WindowFunctionBarProviderDelegate-Protocol.h>

@class AutomaticReadingListContentProvider, AutomationTouchBarProvider, BackgroundLoadController, BookmarksSidebarTitleTextView, BrowserTabGroupPersistentState, BrowserTabViewItem, BrowserTitlebarAccessoryViewController, BrowserWindow, BrowserWindowContentSplitViewController, BrowserWindowContentView, BrowserWindowPersistentState, ColoredRect, FavoritesBarView, FavoritesPickerVisibilityManager, FormTextStatusWatcher, NSArray, NSClipView, NSMapTable, NSMenu, NSMutableArray, NSMutableSet, NSString, NSTabView, NSTextView, NSTimer, NSTitlebarAccessoryViewController, NSURL, NSUUID, NSView, OneStepBookmarkingButtonController, OverlayStatusWindowController, PopupWindowUnifiedFieldViewController, ReadingListContentProvider, SidebarViewController, StatusMessage, TabBarView, TextFieldEditor, ToolbarController, ToolbarNewTabButtonViewController, UnifiedField, UnifiedFieldEditor, VisualTabPickerViewController, WBSFluidProgressController, WindowFunctionBarProvider;

__attribute__((visibility("hidden")))
@interface BrowserWindowController : WindowController <BackgroundLoadControllerDelegate, CAAnimationDelegate, FormTextStatusWatcherDelegate, NSTabViewDelegate, OverlayStatusWindowDelegate, TabDraggingWindowDestination, TabBarViewDelegate, ToolbarControllerDelegate, VisualTabPickerDelegate, FavoritesPickerVisibilityController, FavoritesPickerVisibilityManagerDataSource, WindowFunctionBarProviderDataSource, WindowFunctionBarProviderDelegate, BrowserWindowContentSplitViewControllerDelegate, WBSFluidProgressRocketEffectDelegate, BrowserContentLoaderDelegate, BrowserWindowDelegate, Command1Through9Receiver, ImageHopAnimationDelegate, NSMenuDelegate, NSSplitViewDelegate, ReopensAtLaunch, SearchableWKViewPlaybackControlsPresenter, UnifiedFieldDelegate, WBSFluidProgressControllerWindowDelegate>
{
    ToolbarController *_toolbarController;
    NSTextView *_fieldEditorWithoutAutomaticSubstitution;
    BookmarksSidebarTitleTextView *_bookmarksSidebarTitleTextView;
    struct RefPtr<Safari::UnifiedFieldCompletionController> _unifiedFieldCompletionController;
    NSURL *_completionListURLBeingActivated;
    NSMenu *_dynamicBackMenu;
    NSMenu *_dynamicForwardMenu;
    OneStepBookmarkingButtonController *_oneStepBookmarkingButtonController;
    BOOL _tabBarHiddenByJavaScript;
    BOOL _readyToUpdateKeyboardLoop;
    BOOL _windowWasLoaded;
    NSMutableArray *_topLevelViewOrder;
    NSMutableArray *_collapsibleBarViewOrder;
    NSMapTable *_barsToOriginalHeights;
    StatusMessage *_status;
    BOOL _stopAndReloadButtonWillStop;
    BOOL _hideToolbarOnEndSheet;
    NSTimer *_setInterpretsAllInputAsURLTimer;
    BrowserWindowPersistentState *_pendingClosedState;
    Vector_2480254a _extensionBars;
    ColoredRect *_topExtensionDivider;
    ColoredRect *_bottomExtensionDivider;
    int _fullScreenState;
    double _topContentInsetBeforeEnteringFullScreen;
    BOOL _didLockMenuBarInFullScreen;
    BOOL _favoritesBarIsVisibleEnteringFullScreen;
    NSMutableSet *_currentAutoShowingBars;
    NSMutableSet *_currentAlwaysShowingBars;
    NSMutableSet *_currentAnimatingBars;
    NSMutableSet *_barsAddedWhileInFullScreen;
    NSMutableSet *_barsRemovedWhileInFullScreen;
    struct RefPtr<Safari::ExtensionBrowserWindow> _browserWindowController;
    NSMutableSet *_imageHopAnimationControllers;
    BrowserTabViewItem *_closingTabView;
    struct CGPoint _lastMouseClickPosition;
    WBSFluidProgressController *_fluidProgressController;
    SidebarViewController *_sidebarViewController;
    long long _windowType;
    struct SidebarAnimationContext {
        RetainPtr_c27edd19 snapshot;
        struct CGRect initialSnapshotFrame;
        struct CGRect destinationSnapshotFrame;
        int revealingOrCoveringSidebar;
        char sidebarAnimationInProgress;
    } _sidebarAnimationContext;
    SidebarViewController *_cachedSidebarViewController;
    double _sidebarWidth;
    BrowserWindowContentSplitViewController *_windowContentSplitViewController;
    BOOL _disableSnapshotRestoration;
    BOOL _deferDeterminingFirstResponderUntilNextRunLoop;
    BOOL _creatingNewTab;
    NSTimer *_updateFirstResponderAfterTabSwitchTimer;
    struct unique_ptr<Safari::TabBarController, std::__1::default_delete<Safari::TabBarController>> _tabBarController;
    NSArray *_tabsForGoBack;
    BrowserTabViewItem *_selectedTabForGoBack;
    BrowserTabGroupPersistentState *_tabGroupStateForReplacedTabs;
    NSArray *_tabsForGoForward;
    BrowserTabViewItem *_selectedTabForGoForward;
    NSClipView *_sidebarContainerClipView;
    NSArray *_mostRecentBackgroundLoadURLs;
    BackgroundLoadController *_backgroundLoadController;
    BOOL _didSeeNavigationToBackgroundLoadURL;
    BOOL _fluidProgressControllerNeedsUpdateForBackgroundLoadCommit;
    VisualTabPickerViewController *_visualTabPickerViewController;
    NSView *_visualTabPickerToolbarBackgroundView;
    BOOL _visualTabPickerPendingEntryAnimation;
    BOOL _canToggleTabBarInVisualTabPicker;
    BOOL _canChangeTopInsetInVisualTabPicker;
    BOOL _visualTabPickerIsHidingTabBar;
    BOOL _shouldFocusSelectedTabContentViewAfterVisualTabPickerCloses;
    BOOL _titlebarBlurringDisabled;
    NSView *_titlebarOpaqueBackgroundView;
    ToolbarNewTabButtonViewController *_toolbarNewTabButtonViewController;
    double _titlebarHeightInWindow;
    NSMapTable *_collapsibleBarsToViewControllers;
    BOOL _wasShowingTabBarBeforeEnteringFullScreen;
    PopupWindowUnifiedFieldViewController *_popupWindowUnifiedFieldViewController;
    UnifiedField *_popupWindowUnifiedField;
    BrowserTitlebarAccessoryViewController *_favoritesBarViewController;
    BrowserTitlebarAccessoryViewController *_tabBarViewController;
    NSTitlebarAccessoryViewController *_titlebarBottomSeparatorViewController;
    BrowserWindowController *_detachedBrowserWindowController;
    OverlayStatusWindowController *_overlayStatusWindowController;
    BOOL _statusOverlaysAreEnabled;
    BOOL _isAnimatingReaderTransition;
    NSTimer *_coalescedUpdatesTimer;
    double _lastCoalescedUpdateTime;
    unsigned long long _pendingCoalescedUpdates;
    unsigned long long _postponedUnifiedFieldUpdates;
    BOOL _isPerformingCoalescedUpdates;
    BOOL _isPostponingUnifiedFieldUpdates;
    FormTextStatusWatcher *_formTextStatusWatcherForClose;
    FormTextStatusWatcher *_formTextStatusWatcherForCloseOtherTabs;
    BrowserTabViewItem *_tabForCloseOtherTabs;
    BOOL _didSendOpenEventToExtensions;
    BOOL _didSendCloseEventToExtensions;
    BOOL _shouldIncludePinnedTabsInDeterminingTabBarVisibility;
    unsigned long long _tabIndexToSelectAfterPinnedTabsAreRestored;
    WindowFunctionBarProvider *_functionBarProvider;
    FavoritesPickerVisibilityManager *_favoritesPickerVisibilityManager;
    NSMutableSet *_functionBarTabViewItemsPendingReload;
    TextFieldEditor *_editorWithoutDFRAccessories;
    AutomationTouchBarProvider *_automationTouchBarProvider;
    BOOL _isPopupWindow;
    BOOL _windowIsClosing;
    BOOL _areTabsBeingRearranged;
    BOOL _shouldUpdateFocusOnBackgroundLoadCommit;
    BOOL _prefersSidebarVisible;
    BOOL _prefersSidebarVisibleWithStartPage;
    BOOL _creatingNewSelectedTabRespectingNewTabBehavior;
    BOOL _switchingTabs;
    BOOL _forceEnableTitlebarBlurFilters;
    BOOL _blocksAutomaticUpdatesOfUnifiedField;
    BOOL _unifiedFieldIsFirstResponderWhileLoadingPage;
    BOOL _acceptsGenericIcon;
    BOOL _disableTopContentInsetUpdateForSelectedTab;
    BOOL _isClosingVisualTabPicker;
    BOOL _windowStateWasRestored;
    int _currentTabLoadingStatus;
    FavoritesBarView *_favoritesBarView;
    TabBarView *_tabBarView;
    NSTabView *_tabSwitcher;
    UnifiedFieldEditor *_unifiedFieldEditor;
    unsigned long long _browsingMode;
    NSString *_lastDisplayedSidebarBookmarkListUUID;
    NSUUID *_uuid;
    unsigned long long _numberOfTabsToBeClosedBeforeClosingWindow;
    BrowserWindowContentView *_mainContentView;
    NSView *_firstResponderViewBeforeFullScreenTransition;
    ReadingListContentProvider *_readingListContentProvider;
    AutomaticReadingListContentProvider *_automaticReadingListContentProvider;
    NSView *_webContentSnapshotForSidebarAnimation;
    NSView *_backgroundSidebarAnimationView;
    NSView *_continuousBannerSidebarAnimationView;
    CDUnknownBlockType _completionHandlerForLastSheetEndingOnWindow;
}

+ (struct BrowserContentViewController *)browserContentViewControllerForNavigationPurposesFor:(struct BrowserContentViewController *)arg1;
+ (BOOL)restoreStateIsForPrivateWindow:(id)arg1;
+ (void)openWKView:(id)arg1 inNewTabWithWindowPolicy:(long long)arg2 tabPlacementHint:(const struct TabPlacementHint *)arg3;
+ (id)hiddenEmptyBrowserWindowControllerWithBrowsingMode:(unsigned long long)arg1 isPopupWindow:(BOOL)arg2;
+ (id)hiddenEmptyBrowserWindowControllerWithBrowsingMode:(unsigned long long)arg1 isPopupWindow:(BOOL)arg2 restoringFromLastSession:(BOOL)arg3;
+ (id)openEmptyBrowserWindowController;
+ (id)browserWindowControllerForWindow:(id)arg1;
+ (void)setShouldIgnoreReopen:(BOOL)arg1;
+ (void)reopen;
+ (id)windowControllerForUUID:(id)arg1;
+ (id)allBrowserTabViewItemsFromAllWindows;
+ (id)_windowControllersForDocuments:(id)arg1;
+ (id)orderedWindowControllers;
+ (id)windowControllers;
+ (id)activeWindowController;
@property(copy, nonatomic) CDUnknownBlockType completionHandlerForLastSheetEndingOnWindow; // @synthesize completionHandlerForLastSheetEndingOnWindow=_completionHandlerForLastSheetEndingOnWindow;
@property(retain, nonatomic) NSView *continuousBannerSidebarAnimationView; // @synthesize continuousBannerSidebarAnimationView=_continuousBannerSidebarAnimationView;
@property(retain, nonatomic) NSView *backgroundSidebarAnimationView; // @synthesize backgroundSidebarAnimationView=_backgroundSidebarAnimationView;
@property(retain, nonatomic) NSView *webContentSnapshotForSidebarAnimation; // @synthesize webContentSnapshotForSidebarAnimation=_webContentSnapshotForSidebarAnimation;
@property(retain, nonatomic) AutomaticReadingListContentProvider *automaticReadingListContentProvider; // @synthesize automaticReadingListContentProvider=_automaticReadingListContentProvider;
@property(retain, nonatomic) ReadingListContentProvider *readingListContentProvider; // @synthesize readingListContentProvider=_readingListContentProvider;
@property(retain, nonatomic) NSView *firstResponderViewBeforeFullScreenTransition; // @synthesize firstResponderViewBeforeFullScreenTransition=_firstResponderViewBeforeFullScreenTransition;
@property(nonatomic) BOOL windowStateWasRestored; // @synthesize windowStateWasRestored=_windowStateWasRestored;
@property(readonly, nonatomic) BrowserWindowContentView *mainContentView; // @synthesize mainContentView=_mainContentView;
@property(readonly, nonatomic) BOOL isClosingVisualTabPicker; // @synthesize isClosingVisualTabPicker=_isClosingVisualTabPicker;
@property(nonatomic) struct CGPoint lastMouseClickPosition; // @synthesize lastMouseClickPosition=_lastMouseClickPosition;
@property(nonatomic) unsigned long long numberOfTabsToBeClosedBeforeClosingWindow; // @synthesize numberOfTabsToBeClosedBeforeClosingWindow=_numberOfTabsToBeClosedBeforeClosingWindow;
@property(nonatomic) BOOL disableTopContentInsetUpdateForSelectedTab; // @synthesize disableTopContentInsetUpdateForSelectedTab=_disableTopContentInsetUpdateForSelectedTab;
@property(readonly, nonatomic) int currentTabLoadingStatus; // @synthesize currentTabLoadingStatus=_currentTabLoadingStatus;
@property(nonatomic) BOOL acceptsGenericIcon; // @synthesize acceptsGenericIcon=_acceptsGenericIcon;
@property(nonatomic) BOOL unifiedFieldIsFirstResponderWhileLoadingPage; // @synthesize unifiedFieldIsFirstResponderWhileLoadingPage=_unifiedFieldIsFirstResponderWhileLoadingPage;
@property(nonatomic) BOOL blocksAutomaticUpdatesOfUnifiedField; // @synthesize blocksAutomaticUpdatesOfUnifiedField=_blocksAutomaticUpdatesOfUnifiedField;
@property(retain, nonatomic) NSUUID *uuid; // @synthesize uuid=_uuid;
@property(copy, nonatomic) NSString *lastDisplayedSidebarBookmarkListUUID; // @synthesize lastDisplayedSidebarBookmarkListUUID=_lastDisplayedSidebarBookmarkListUUID;
@property(nonatomic) BOOL forceEnableTitlebarBlurFilters; // @synthesize forceEnableTitlebarBlurFilters=_forceEnableTitlebarBlurFilters;
@property(readonly, nonatomic) unsigned long long browsingMode; // @synthesize browsingMode=_browsingMode;
@property(readonly, nonatomic, getter=isSwitchingTabs) BOOL switchingTabs; // @synthesize switchingTabs=_switchingTabs;
@property(readonly, nonatomic, getter=isCreatingNewSelectedTabRespectingNewTabBehavior) BOOL creatingNewSelectedTabRespectingNewTabBehavior; // @synthesize creatingNewSelectedTabRespectingNewTabBehavior=_creatingNewSelectedTabRespectingNewTabBehavior;
@property(nonatomic) BOOL prefersSidebarVisibleWithStartPage; // @synthesize prefersSidebarVisibleWithStartPage=_prefersSidebarVisibleWithStartPage;
@property(nonatomic) BOOL prefersSidebarVisible; // @synthesize prefersSidebarVisible=_prefersSidebarVisible;
@property(nonatomic) BOOL shouldUpdateFocusOnBackgroundLoadCommit; // @synthesize shouldUpdateFocusOnBackgroundLoadCommit=_shouldUpdateFocusOnBackgroundLoadCommit;
@property(readonly, nonatomic) UnifiedFieldEditor *unifiedFieldEditor; // @synthesize unifiedFieldEditor=_unifiedFieldEditor;
@property(readonly, nonatomic) BOOL areTabsBeingRearranged; // @synthesize areTabsBeingRearranged=_areTabsBeingRearranged;
@property(nonatomic) __weak NSTabView *tabSwitcher; // @synthesize tabSwitcher=_tabSwitcher;
@property(retain, nonatomic) TabBarView *tabBarView; // @synthesize tabBarView=_tabBarView;
@property(readonly, nonatomic) BOOL windowIsClosing; // @synthesize windowIsClosing=_windowIsClosing;
@property(readonly, nonatomic, getter=isPopupWindow) BOOL popupWindow; // @synthesize popupWindow=_isPopupWindow;
- (id).cxx_construct;
- (void).cxx_destruct;
@property(readonly, nonatomic) NSString *displayNameModifiers;
- (void)handleCommand1Through9ActionForIndex:(unsigned long long)arg1;
- (BOOL)canHandleCommand1Through9ActionForIndex:(unsigned long long)arg1;
- (void)formTextStatusWasVerified:(id)arg1;
- (void)_notifyVoiceOverIfNeededThatTab:(id)arg1 isPlayingMutableMedia:(BOOL)arg2 isMuted:(BOOL)arg3;
- (void)_audioMenuTabMenuItemClicked:(id)arg1;
- (void)_unmuteAllTabs:(id)arg1;
- (void)_unmuteAllTabsExcludingTabWithBrowserContentViewController:(struct BrowserContentViewController *)arg1;
- (void)_muteAllTabs:(id)arg1;
@property(readonly, nonatomic) BOOL currentTabHasActiveMediaCaptureDevice;
@property(readonly, nonatomic, getter=isCurrentTabPlayingAudio) BOOL currentTabPlayingAudio;
- (id)audioMenuForBrowserTabViewItem:(id)arg1;
- (struct MutableMediaPlaybackAndMuteState)_gatherTabAudioPlaybackAndMuteStateForTargetTab:(id)arg1;
- (void)_updateAudioIndicatorInUnifiedField;
- (void)_overallAudioStateDidChange:(id)arg1;
- (void)toggleMuteTabFromMenu:(id)arg1;
- (void)mutedStateDidChangeForTabViewItem:(id)arg1;
- (void)_mutableMediaPlayingStateDidChange:(id)arg1;
- (BOOL)_updateMuteOtherTabsMenuItemWithTabAudioState:(struct MutableMediaPlaybackAndMuteState)arg1;
- (BOOL)_updateMuteCurrentTabMenuItemWithTabAudioState:(struct MutableMediaPlaybackAndMuteState)arg1;
- (int)_newTabPositionRespectingVisualTabPickerVisibility:(int)arg1;
- (long long)windowPolicyRespectingVisualTabPickerVisibility:(long long)arg1;
@property(nonatomic, getter=isPopupWindowUnifiedFieldVisible) BOOL popupWindowUnifiedFieldVisible;
- (void)_setupPopupWindowUnifiedField;
- (id)_currentlyVisibleNewTabButton;
- (void)_addOrRemoveNewTabButtonInToolbarIfNecessary;
- (void)_updateContentViewTopContentInset;
@property(readonly, nonatomic) double topContentInset;
- (double)_topContentInsetForTransitionFromFullScreen;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)_stopObservingContentLayoutRectChanges;
- (void)_startObservingContentLayoutRectChanges;
- (BOOL)_isToolbarBlurringEnabledInFullScreen;
- (long long)_readerButtonState;
- (void)_setReaderButtonState:(long long)arg1 animate:(BOOL)arg2;
- (void)willStartExitAnimationForVisualTabPickerController:(id)arg1;
- (void)visualTabPickerController:(id)arg1 selectTab:(id)arg2;
- (void)createNewTabForVisualTabPickerController:(id)arg1;
- (BOOL)creatingNewTabWillCloseVisualTabPickerController:(id)arg1;
- (void)visualTabPickerControllerWillClose:(id)arg1;
- (void)visualTabPickerController:(id)arg1 openCloudTab:(id)arg2;
- (id)browserTabViewItemsForVisualTabPickerController:(id)arg1;
- (id)selectedTabViewItemForVisualTabPickerController:(id)arg1;
- (struct CGRect)frameForVisualTabPickerController:(id)arg1;
- (void)_loadTabURL:(id)arg1 withWindowPolicy:(long long)arg2;
- (void)_updateVisualTabPickerButton;
- (void)_takeOffscreenToolbarSnapshotForVisualTabPickerAnimation;
- (void)toggleVisualTabPickerFromMenu:(id)arg1;
- (void)toggleVisualTabPicker:(id)arg1;
- (void)focusVisualTabPickerSearchField;
- (BOOL)isShowingVisualTabPicker;
- (struct CGRect)visualTabPickerRootViewFrame;
- (void)_updateVisualTabPickerFrame;
- (void)_visualTabPickerFadeOutToolbarBackground;
- (void)_visualTabPickerInsertToolbarBackground;
- (void)visualTabPickerControllerDidEndHiding:(id)arg1;
- (void)visualTabPickerControllerDidBeginHiding:(id)arg1;
- (void)_showTabBarAndNewTabButtonWhenHidingVisualTabPickerIfNeeded;
- (void)_showTabSwitcherAndSidebarWhenHidingVisualTabPickerIfNeeded;
- (void)showVisualTabPicker;
- (BOOL)_canShowVisualTabPicker;
- (void)cancelVisualTabPickerPendingEntryAnimation;
- (void)setUpVisualTabPickerView;
- (BOOL)_visualTabPickerShouldAnimateSidebar;
- (BOOL)validate_toggleResponsiveDesignMode:(id)arg1;
- (void)toggleResponsiveDesignMode:(id)arg1;
- (void)performSearchWithQuery:(id)arg1 usingQuickWebsiteSearchProvider:(id)arg2;
- (void)_setShouldDeferWKViewInWindowChanges:(BOOL)arg1;
- (void)_setShouldDisableFrameSizeUpdates:(BOOL)arg1;
- (void)_updateWKViewLayoutMode;
- (BOOL)_isWindowFullScreenToolbarWindow:(id)arg1;
- (BOOL)_collapsibleBarsAreInFullScreenToolbarWindow;
- (void)_windowDidResizeToExitFullScreen;
- (void)_windowDidResizeToEnterFullScreen;
- (BOOL)_hasAttachedSheet;
- (void)_finishExitingFullScreen;
- (void)windowDidExitFullScreen:(id)arg1;
- (void)_ensureLocationBarIsVisibleIfWindowIsNotInFullScreen;
- (void)windowWillExitFullScreen:(id)arg1;
- (void)windowDidEnterFullScreen:(id)arg1;
- (void)windowDidFailToEnterFullScreen:(id)arg1;
- (void)windowWillEnterFullScreen:(id)arg1;
- (BOOL)isToolbarInFullScreenToolbarWindow;
- (struct CGSize)window:(id)arg1 willUseFullScreenContentSize:(struct CGSize)arg2;
- (void)revealContentUnderFullScreenToolbar;
- (BOOL)windowShouldDeferFullScreenTransitions;
- (BOOL)_hidesToolbarInFullScreen;
- (BOOL)_automaticallyHidesToolbar;
- (void)prepareForWindowToExitFullScreen;
- (void)prepareForWindowToEnterFullScreen;
- (BOOL)isTogglingFullScreenMode;
- (int)_barDisplayContext;
- (BOOL)isEnteringOrInFullScreenMode;
- (BOOL)isInFullScreenMode;
- (void)_refreshSharedLinks;
- (BOOL)_canShowCloudTabsPopover;
- (id)_originatingViewForSharingServicePicker;
- (BOOL)_canShowSharingServicePicker;
- (struct CGPoint)_downloadHopEndPoint;
- (struct CGPoint)_downloadHopStartPoint;
- (void)_startDownloadHopAnimationFromPoint:(struct CGPoint)arg1;
- (void)_downloadDidBegin:(id)arg1;
- (void)browserWindowContentSplitViewControllerDidShowOrHideSidebar:(id)arg1;
- (void)browserWindowContentSplitViewControllerWillHideOverlaySidebar:(id)arg1;
- (void)browserWindowContentSplitViewControllerWillShowOverlaySidebar:(id)arg1;
- (struct CGPoint)_hopAnimationEndPointForDestination:(int)arg1;
- (struct CGPoint)_siteIconHopAnimationStartPoint;
- (double)sidebarWidth;
- (void)setSidebarWidth:(double)arg1;
@property(readonly, nonatomic) BOOL canAnimateSidebar;
@property(readonly, nonatomic) BOOL canToggleSidebar;
@property(readonly, nonatomic, getter=isSidebarVisible) BOOL sidebarVisible;
@property(readonly, nonatomic) NSView *sidebarContainerView;
- (void)_insertExtensionBars:(const Vector_2480254a *)arg1 withAnimation:(BOOL)arg2;
- (void)_extensionWasEnabled:(id)arg1;
- (void)_extensionWasDisabled:(id)arg1;
- (BOOL)_anyExtensionBarsVisibleExcludingBar:(const struct ExtensionBar *)arg1 ignoringFullScreen:(BOOL)arg2;
- (BOOL)_anyExtensionBarsVisibleExcludingBar:(const struct ExtensionBar *)arg1;
- (BOOL)_anyExtensionBarsVisibleIgnoringFullScreen:(BOOL)arg1;
- (BOOL)_anyExtensionBarsVisible;
- (void)_setupExtensionBars;
- (void)_setUpExtensionBar:(struct ExtensionBar *)arg1 withFrame:(struct CGRect)arg2;
- (void)_updateExtensionBarDividers;
- (void)_didHideExtensionBar:(const struct ExtensionBar *)arg1;
- (void)_willShowExtensionBar:(const struct ExtensionBar *)arg1;
- (void)_setExtensionBar:(const struct ExtensionBar *)arg1 visible:(BOOL)arg2 withAnimation:(BOOL)arg3;
- (void)_setExtensionBarsVisible:(BOOL)arg1;
- (void)_sendWillDeactivateEventToExtensions;
- (void)_sendWillActivateEventToExtensions;
- (void)_sendWillCloseEventToExtensions;
- (void)_sendWillOpenEventToExtensions;
- (BOOL)shouldSuppressExtensionWindowEvents;
- (id)_windowContentView;
- (id)_screenForWindow;
- (BOOL)_windowIsFullHeight;
- (void)_updateKeyboardLoop;
- (struct BrowserContentViewController *)_tryMultipleURLs:(unique_ptr_d9da4b2f)arg1 windowPolicy:(long long)arg2 httpReferrer:(id)arg3;
- (void)_updateReaderButton:(int)arg1;
- (long long)_resolveReaderButtonState;
- (BOOL)_stopReloadButtonShouldBeVisible;
- (id)_forwardListMenuForButton:(id)arg1;
- (id)_backListMenuForButton:(id)arg1;
- (void)_performUnifiedFieldActionWithWindowPolicy:(long long)arg1;
- (void)_exitQuickWebsiteSearchMode;
- (BOOL)_shouldExitQuickWebsiteSearchMode;
- (void)_enterQuickWebsiteSearchMode;
- (BOOL)_canEnterQuickWebsiteSearchMode;
- (void)_performWebSearchWithWindowPolicy:(long long)arg1;
- (void)_searchWebForString:(id)arg1 withWindowPolicy:(long long)arg2;
- (struct BrowserContentViewController *)_goToUnifiedFieldURLWithWindowPolicy:(long long)arg1 httpReferrer:(id)arg2;
- (struct BrowserContentViewController *)_goToUnifiedFieldURLWithWindowPolicy:(long long)arg1;
- (void)_updateFirstResponderAfterTabSwitch;
- (BOOL)_canAutoFill;
- (BOOL)_canGoHome;
- (BOOL)_canCreateWebClip;
- (BOOL)_canGoForward;
- (void)_releaseForwardTabsIfNecessary;
- (BOOL)_canGoBack;
- (void)_releaseBackTabsIfNecessary;
- (void)_handleNavigationAction:(id)arg1 request:(id)arg2;
- (id)contentViewForOverlayStatusWindowController:(id)arg1;
- (id)parentWindowForOverlayStatusWindowController:(id)arg1;
- (BOOL)canShowStatusMessageInOverlayStatusWindow:(id)arg1;
- (void)_setStatusMessage:(id)arg1;
- (void)_clearStatus;
- (void)setOverlayStatusBarEnabled:(BOOL)arg1;
- (void)_setUpOverlayStatusWindowController;
- (void)_setUpStatusBar;
- (id)_setAutoresizingMasksForOrderedViews:(id)arg1 toResizeOnly:(id)arg2;
- (void)_performUpdatesAfterTogglingBar;
- (void)_toggleBar:(id)arg1 withAnimation:(BOOL)arg2 isShowing:(BOOL)arg3 forceMaintainFullHeight:(BOOL)arg4;
- (void)_toggleBar:(id)arg1 withAnimation:(BOOL)arg2 isShowing:(BOOL)arg3;
- (void)_toggleFullScreenBar:(id)arg1 withAnimation:(BOOL)arg2 isShowing:(BOOL)arg3;
- (void)_setMenuBarAutoHidingIsEnabled:(id)arg1;
- (BOOL)_isMenuBarVisibleInThisFullScreenSpace;
- (BOOL)_isTogglingFullScreenBar;
- (void)_unlockMenuBarIfNeeded;
- (void)_lockMenuBarIfNeeded;
- (void)_prepareBarsToExitFullScreen;
- (void)_prepareBarsToEnterFullScreen;
- (void)_toolbarsVisibilityDidChange;
- (void)_toggleToolbarIgnoringCurrentEvent:(id)arg1;
- (void)_completionListHintDidChange:(id)arg1;
- (void)_unifiedFieldCompletionListDidHide:(id)arg1;
- (void)_completionListSelectionDidChange:(id)arg1;
- (id)_urlStringForUnifiedFieldIcon;
- (struct UnifiedFieldCompletionController *)_unifiedFieldCompletionController;
- (void)_stopSetInterpretsAllInputAsURLTimer;
- (void)_setInterpretsAllInputAsURL;
- (void)_stopUpdateFirstResponderAfterTabSwitchTimer;
- (BOOL)_unifiedFieldIsReflectingUnifiedFieldURL;
- (BOOL)_unifiedFieldIsReflectingCurrentURL;
- (BOOL)_unifiedFieldIsReflectingURL:(id)arg1;
- (BOOL)_unifiedFieldIsShowing;
- (BOOL)_unifiedFieldIsEmpty;
- (BOOL)_setUnifiedFieldNonURLText:(id)arg1;
- (void)_updateUIAfterProgrammaticUnifiedFieldTextChange;
- (void)_updatePageTitleInUnifiedField;
@property(readonly, nonatomic) BOOL unifiedFieldTextLooksLikeWebSearch;
- (id)_unifiedFieldText;
- (id)_unifiedFieldURL;
- (void)_toggleLocationBarWithoutSavingConfiguration;
- (BOOL)_makeUnifiedFieldFirstResponderProgrammatically;
- (BOOL)_makeUnifiedFieldFirstResponder;
- (void)_setUpLocationBar;
- (void)_performUnifiedFieldAction:(id)arg1;
- (BOOL)_currentPageIsSecureEnoughToShowLock;
- (void)_abortUnifiedFieldCompletion;
- (BOOL)_canToggleHistoryInBookmarksView;
- (BOOL)_isShowingHistoryInCurrentContentView;
- (BOOL)_isShowingBookmarksInCurrentContentView;
- (BOOL)_isShowingBookmarksAndHistoryCollectionView;
- (BOOL)_canAddBookmark;
- (id)_currentBookmarksViewController;
- (void)_setFavoritesBarNewTabButtonVisibility:(BOOL)arg1;
- (void)_toggleFavoritesBarWithAnimation:(BOOL)arg1;
- (void)_showFavoritesBarIfNeeded;
- (BOOL)_shouldShowFavoritesBar;
- (BOOL)_trackSearchButtonForEvent:(id)arg1;
- (void)_recentSearchesCleared:(id)arg1;
- (void)updateUnifiedFieldPlaceholderString;
- (id)_defaultSearchProviderDisplayName;
- (void)_updateUnifiedFieldInputTypeCuesIfNeeded;
- (void)_updateSecurityUIVisibility;
- (BOOL)_shouldShowSecurityUIInUnifiedField;
- (void)_updateWindowWithNewSelectedTabInfoUpdatingFluidProgressController:(BOOL)arg1;
- (void)_updateWindowWithCurrentTabInfoUpdatingFluidProgressController:(BOOL)arg1 shouldUpdateKeyboardLoop:(BOOL)arg2 isSelectingNewTab:(BOOL)arg3;
- (void)_closeOtherTabsAfterConfirmingClosingVideoWithPIPIfNecessary:(id)arg1;
- (void)_confirmClosingOtherTabsIfAnyAreEdited:(id)arg1;
- (void)_confirmClosingEditedTab:(id)arg1;
- (id)firstTabWithUnsavedCredentials;
- (id)_firstTabWithUnsavedCredentialsPassingTest:(CDUnknownBlockType)arg1;
- (void)_closeWindowAfterChecks;
- (BOOL)_displayCloseWindowConfirmSheetForPIPIfNecessary;
- (BOOL)_displayCloseConfirmation;
- (void)_updateDocumentIsEdited;
- (void)_updateCloseKeyEquivalents;
- (void)releaseTabsForGoingForward;
- (void)_releaseTabsForGoingBack;
- (void)_releaseTabsForBackForward;
- (void)_releaseTabs:(id)arg1 andSendWillCloseTabMessages:(BOOL)arg2;
- (id)_extractTabsForBackForwardAndGetSelectedTab:(id *)arg1;
- (id)_replaceCurrentTabsWithTabs:(id)arg1 selectedTab:(id)arg2 getPreviouslySelectedTab:(id *)arg3;
- (void)_removeAllTabCloseUndoActions;
- (id)restoreClosedTab:(id)arg1 atIndex:(unsigned long long)arg2 andSelect:(BOOL)arg3;
- (void)undoCloseTab:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)closeTabGroupWhileRedoing:(id)arg1;
- (void)_closeTabViewItem:(id)arg1;
- (void)_closeWindowIfNoUnpinnedTabsLeft;
- (void)_closeWindowIfPossible;
- (void)_closeOtherTabsWithoutConfirming:(id)arg1;
- (void)_closeTabWithoutConfirming:(id)arg1 allowUndo:(BOOL)arg2;
- (void)_closeTabWithoutConfirming:(id)arg1;
- (void)closeTabWithoutConfirmingWithUUID:(id)arg1;
- (void)_selectTab:(id)arg1;
- (void)_didSelectNewTab:(id)arg1 withLastSelectedTab:(id)arg2;
- (void)_willUnselectTab:(id)arg1;
- (void)_reloadTab:(id)arg1;
- (void)_moveTabToNewWindow:(id)arg1;
- (id)_setUpTabForView:(id)arg1 atIndex:(unsigned long long)arg2 options:(unsigned long long)arg3;
- (void)_insertTabViewItem:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)_insertTab:(id)arg1 atIndex:(unsigned long long)arg2 andSelect:(BOOL)arg3;
- (void)_insertTabFromOtherWindow:(id)arg1 atIndex:(unsigned long long)arg2 andSelect:(BOOL)arg3;
- (struct BrowserContentViewController *)_createTabWithPosition:(int)arg1 andSelect:(BOOL)arg2;
- (id)_createTabWithView:(id)arg1 atIndex:(unsigned long long)arg2 options:(unsigned long long)arg3;
- (void)_didInsertTab;
- (void)_willInsertTab;
- (void)_showTabBarAndUpdateCloseKeyEquivalentsIfNeeded;
- (id)_setUpBackgroundTabAfterLastTabForView:(id)arg1 shouldDeferResizingBrowserWKView:(BOOL)arg2;
- (void)_setTabBarVisible:(BOOL)arg1;
- (BOOL)_alwaysShowTabBar;
- (BOOL)_canCloseTabFromMenuAndCloseButton:(id)arg1;
- (BOOL)_canCloseLastUnpinnedTabWithoutClosingWindow:(id)arg1;
- (BOOL)_isClosingLastUnpinnedTab:(id)arg1;
- (BOOL)_canCloseTab:(id)arg1;
- (BOOL)_canCloseOtherTabsExcludingTab:(id)arg1;
- (BOOL)_moreThanOneTabShowing;
- (void)_toggleTabBarWithAnimation:(BOOL)arg1;
- (BOOL)_shouldHideTabBarForTabSwitcher:(id)arg1;
- (BOOL)_shouldHideTabBarAfterClosingOtherBrowserTabViewItems:(id)arg1;
- (BOOL)_shouldHideTabBarAfterClosingBrowserTabViewItem:(id)arg1;
- (BOOL)_shouldShowTabBarIgnoringVisualTabPicker;
- (unsigned long long)_numberOfTabsForDeterminingTabBarVisibility;
@property(readonly, nonatomic) BOOL shouldShowTabBar;
- (BOOL)_canToggleTabBarVisibility;
- (void)_setUpTabBar;
- (id)_findTabForView:(id)arg1;
- (id)_findTabForView:(id)arg1 inTabViewItems:(id)arg2;
- (struct TabPlacementHint)_currentTabPlacementHint;
- (void)_applyNewBrowserViewBehavior:(long long)arg1 toBrowserContentViewController:(struct BrowserContentViewController *)arg2 usingReferenceBrowserContentViewController:(struct BrowserContentViewController *)arg3;
- (BOOL)_canPrintFromToolbar;
- (void)_tellUserThatAppIsHosed;
- (double)_originalHeightForBar:(id)arg1;
- (void)_removeCollapsibleBarView:(id)arg1;
- (void)_insertCollapsibleBarView:(id)arg1 initiallyVisible:(BOOL)arg2 atIndex:(unsigned long long)arg3 withOriginalHeight:(double)arg4;
- (void)_insertCollapsibleBarViewController:(id)arg1 mainBarView:(id)arg2 initiallyVisible:(BOOL)arg3 atIndex:(unsigned long long)arg4 withOriginalHeight:(double)arg5;
- (void)_insertCollapsibleBarViewController:(id)arg1 initiallyVisible:(BOOL)arg2 atIndex:(unsigned long long)arg3 withOriginalHeight:(double)arg4;
- (void)_toggleCollapsibleBar:(id)arg1 toBeVisible:(BOOL)arg2;
- (BOOL)_isBarAutoShowingInFullScreen:(id)arg1;
- (void)_removeViewControllerForCollapsibleBar:(id)arg1;
- (void)_insertViewControllerForCollapsibleBar:(id)arg1;
- (void)_collectTopLevelViews;
- (void)_iconDidChange:(id)arg1;
- (void)_allIconsRemoved:(id)arg1;
- (void)_parentalControlsDidChange;
- (void)_makeFirstResponder:(id)arg1;
- (id)_windowURL;
- (id)_attachedSheet;
- (void)_didReplaceBrowserWKViewInTab:(id)arg1 shouldUpdateFluidProgressController:(BOOL)arg2;
- (struct BrowserContentViewController *)currentBrowserContentViewControllerForNavigationPurposes;
- (id)continuousReadingListViewControllerForWKView:(id)arg1;
- (BOOL)continuousPageViewIsHandlingPageTransitionOrLoadingPageItem;
- (BOOL)isInContinuousMode;
- (void)_stopPostponingCoalescedUnifiedFieldUpdates;
- (void)_startPostponingCoalescedUnifiedFieldUpdates;
- (void)_performCoalescedUpdates;
- (void)_updateOneStepBookmarkingButtonNow;
- (void)_updateShareButtonNow;
- (void)_updateWindowTitleNow;
- (void)_updateStopReloadButtonNow;
- (void)_updateUnifiedFieldTextNowIfDirty;
- (BOOL)_updateUnifiedFieldTextNowIsSelectingNewTab:(BOOL)arg1;
- (void)_updateUnifiedFieldIconNow;
- (void)_updateFunctionBarTabThumbnailsSoon;
- (void)_updateSelectedFunctionBarTabSoon;
- (void)updateOneStepBookmarkingButtonSoon;
- (void)updateShareButtonSoon;
- (void)updateReaderButtonSoon;
- (void)updateWindowTitleSoon;
- (void)updateSidebarButtonSoon;
- (void)updateTabTitlesSoon;
- (void)updateStopReloadButtonSoon;
- (void)updateUnifiedFieldTextSoon;
- (void)updateUnifiedFieldIconSoon;
- (void)_coalescedUpdateTimerFired:(id)arg1;
- (void)_invalidateCoalescedUpdatesTimer;
- (void)_cancelAllCoalescedUpdates;
- (void)_cancelCoalescedUpdate:(unsigned long long)arg1;
- (void)_performCoalescedUpdateSoon:(unsigned long long)arg1;
- (void)handlePerformSelectNextOrPreviousTabKeyEquivalentWithEvent:(id)arg1 navigationDirection:(int)arg2;
- (void)updateOneStepBookmarkingButton;
- (void)updateReaderButtonNow;
- (void)updateStatusMessage;
- (void)restoreStateWithCoder:(id)arg1;
- (void)encodeRestorableStateWithCoder:(id)arg1;
- (void)clearPendingClosedWindowState;
- (id)takePendingClosedWindowState;
- (void)updatePendingClosedWindowState;
- (void)sessionStateDidChange;
- (struct BrowserContentViewController *)currentBrowserContentViewControllerIncludingBackgroundLoad;
- (struct BrowserContentViewController *)backgroundLoadBrowserContentViewControllerForTab:(id)arg1;
- (id)extensionEventTargetForBackgroundLoad:(id)arg1;
- (struct BrowserContentViewController *)currentBrowserContentViewControllerIgnoringVisualTabPickerVisibility;
- (struct BrowserContentViewController *)currentBrowserContentViewController;
- (struct ExtensionBrowserWindow *)extensionBrowserWindow;
- (void)setExtensionBar:(const struct ExtensionBar *)arg1 visible:(BOOL)arg2 withAnimation:(BOOL)arg3;
- (id)initWithBrowsingMode:(unsigned long long)arg1 isPopupWindow:(BOOL)arg2;
- (id)initAsPopupWindow:(BOOL)arg1;
- (id)init;
- (void)toolbarItem:(const struct ExtensionToolbarItem *)arg1 handleNavigationAction:(id)arg2 request:(id)arg3;
- (void)bar:(const struct ExtensionBar *)arg1 handleNavigationAction:(id)arg2 request:(id)arg3;
@property(readonly, nonatomic) BrowserTabViewItem *onlyUnpinnedDisposableTab;
- (BOOL)shouldBlockTabsFromResizing;
- (BOOL)closeKeyEquivalentClosesTab;
- (void)dealloc;
- (void)_updateSecurityUI;
- (void)_updateEVButtonForHost:(id)arg1 certificateChain:(id)arg2;
- (void)_updateSecurityUIWithEVCertificateTitle:(id)arg1;
- (void)updateSidebarVisibility;
- (void)updateSidebarButtonNow;
- (void)userDidScrollDownInBrowserWKView:(id)arg1;
- (void)updateWindowTitlebarBlurFilters;
- (void)_setTitlebarBlurFiltersDisabled:(BOOL)arg1;
- (void)installedBannersDidChangeInBrowserContentViewController:(struct BrowserContentViewController *)arg1;
- (void)statusDidChangeInBrowserContentViewController:(struct BrowserContentViewController *)arg1;
- (void)secureContentStatusDidChangeInBrowserContentViewController:(struct BrowserContentViewController *)arg1;
- (void)loadingStatusDidChangeInBrowserContentViewController:(struct BrowserContentViewController *)arg1;
- (void)pageTitleDidChangeInBrowserContentViewController:(struct BrowserContentViewController *)arg1;
- (void)unifiedFieldURLDidChangeInBrowserContentViewController:(struct BrowserContentViewController *)arg1;
- (void)currentURLDidChangeInBrowserContentViewController:(struct BrowserContentViewController *)arg1;
- (void)pageTypeDidChangeInBrowserContentViewController:(struct BrowserContentViewController *)arg1;
- (void)mainDocumentDidLoadInBrowserContentViewController:(struct BrowserContentViewController *)arg1;
- (void)mainDocumentDidFirstVisuallyNonEmptyLayoutInBrowserContentViewController:(struct BrowserContentViewController *)arg1;
- (void)mainDocumentDidFirstLayoutInBrowserContentViewController:(struct BrowserContentViewController *)arg1;
- (void)mainContentViewDidChangeInBrowserContentViewController:(struct BrowserContentViewController *)arg1;
- (void)browserContentViewController:(struct BrowserContentViewController *)arg1 loadDidFinishForMainFrame:(const struct Frame *)arg2;
- (void)browserContentViewController:(struct BrowserContentViewController *)arg1 loadDidCommitForMainFrame:(const struct Frame *)arg2;
- (void)browserContentViewController:(struct BrowserContentViewController *)arg1 loadDidStartForMainFrame:(const struct Frame *)arg2;
- (void)progressDidCancelInBrowserContentViewController:(struct BrowserContentViewController *)arg1;
- (void)progressDidFinishInBrowserContentViewController:(struct BrowserContentViewController *)arg1;
- (void)progressValueDidChangeInBrowserContentViewController:(struct BrowserContentViewController *)arg1;
- (void)progressDidStartInBrowserContentViewController:(struct BrowserContentViewController *)arg1;
- (BOOL)_shouldUpdateFluidProgressForBrowserContentViewController:(struct BrowserContentViewController *)arg1;
- (void)didStartBrowserInitiatedLoadInBrowserContentViewController:(struct BrowserContentViewController *)arg1;
- (void)webViewReaderDidBecomeUnavailableUnexpectedly:(struct BrowserContentViewController *)arg1;
- (void)webViewReaderDidDeactivate:(struct BrowserContentViewController *)arg1;
- (void)webViewReaderWillDeactivate:(struct BrowserContentViewController *)arg1;
- (void)webViewReaderDidActivate:(struct BrowserContentViewController *)arg1;
- (void)webViewReaderWillActivate:(struct BrowserContentViewController *)arg1;
- (BOOL)_shouldForceTitlebarBlurringDuringReaderAnimation:(struct BrowserContentViewController *)arg1;
- (void)webViewMainContentViewDidChange:(struct BrowserContentViewController *)arg1;
- (void)webViewBlockedFromKeyViewLoopHasChanged:(struct BrowserContentViewController *)arg1;
- (void)browserContentViewControllerDidFirstVisuallyNonEmptyLayout:(struct BrowserContentViewController *)arg1;
- (void)_updateThumbnailForTabViewItemSoon:(id)arg1;
- (void)tabsWereRearranged;
- (void)didSelectTabViewItem;
- (void)willSelectTabViewItem:(id)arg1;
- (BOOL)_shouldSetUnifiedFieldAsFirstResponderImmediatelyAfterCurrentTabWasSelected;
- (BOOL)_isShowingOrExpectingEmptyOrStartPage;
- (BOOL)_makeCurrentContentViewOfSelectedTabFirstResponderIfNecessary;
- (unsigned long long)_dragOperationForTabDraggingInfo:(id)arg1;
- (id)destinationForTabDragOperation:(id)arg1;
- (BOOL)menuHasKeyEquivalent:(id)arg1 forEvent:(id)arg2 target:(id *)arg3 action:(SEL *)arg4;
- (void)menuNeedsUpdate:(id)arg1;
- (void)unifiedFieldDidMoveToWindow:(id)arg1;
- (BOOL)unifiedField:(id)arg1 trackSearchButtonForEvent:(id)arg2;
- (void)unifiedFieldWasClicked:(id)arg1;
- (BOOL)unifiedFieldShouldSelectAllAfterMouseDown:(id)arg1;
- (void)endBatchTabManipulation;
- (void)beginBatchTabManipulation;
- (void)showNewlyInstalledPlugInDialogWithPlugInName:(id)arg1;
- (void)_reloadWithPlugIns;
- (void)_reloadWithPlugIns:(id)arg1;
- (id)_reloadWithPlugInsMenuItemIfAppropriate;
- (id)unifiedFieldReloadMenu:(id)arg1;
- (id)unifiedFieldAudioIndicatorMenu:(id)arg1;
- (void)unifiedFieldPerformAudioIndicatorAction:(id)arg1;
- (void)unifiedFieldPerformSecurityPillAction:(id)arg1;
- (void)unifiedFieldPerformRightmostButtonAction:(id)arg1;
- (void)unifiedFieldMarkedTextDidChange:(id)arg1;
- (void)unifiedFieldAutocompleteSelectionDidChange:(id)arg1;
- (void)unifiedFieldResignedFirstResponder:(id)arg1;
- (void)unifiedFieldBecameFirstResponder:(id)arg1;
- (id)bookmarkToDragFromSiteIconInUnifiedField:(id)arg1;
- (void)unifiedFieldURLDropped:(id)arg1;
- (BOOL)control:(id)arg1 textView:(id)arg2 doCommandBySelector:(SEL)arg3;
- (BOOL)_appendSlashAndCollapseSelectionInUnifiedField;
- (void)controlTextDidEndEditing:(id)arg1;
- (void)controlTextDidChange:(id)arg1;
- (void)browserWindow:(id)arg1 shouldGoToURL:(id)arg2;
- (id)browserWindowTitleBarURL:(id)arg1;
- (unsigned long long)window:(id)arg1 willUseFullScreenPresentationOptions:(unsigned long long)arg2;
- (void)windowWillClose:(id)arg1;
- (void)_tellAppControllerWindowWillClose;
- (BOOL)windowShouldClose:(id)arg1;
- (id)windowWillReturnFieldEditor:(id)arg1 toObject:(id)arg2;
- (struct CGRect)window:(id)arg1 willPositionSheet:(id)arg2 usingRect:(struct CGRect)arg3;
- (double)_sheetPositionTop;
- (BOOL)window:(id)arg1 willHandleMouseDownEvent:(id)arg2;
- (void)doCommandBySelector:(SEL)arg1;
- (BOOL)window:(id)arg1 willHandleKeyEvent:(id)arg2;
- (BOOL)window:(id)arg1 performKeyEquivalent:(id)arg2;
- (void)swipeWithEvent:(id)arg1;
- (struct CGRect)windowWillUseStandardFrame:(id)arg1 defaultFrame:(struct CGRect)arg2;
- (void)windowWillOrderOnScreen:(id)arg1;
- (void)windowDidDeminiaturize:(id)arg1;
- (void)windowDidMiniaturize:(id)arg1;
- (void)windowDidMove:(id)arg1;
- (void)windowDidEndLiveResize:(id)arg1;
- (void)windowDidResize:(id)arg1;
- (struct CGSize)windowWillResize:(id)arg1 toSize:(struct CGSize)arg2;
- (void)windowDidResignMain:(id)arg1;
- (void)windowDidBecomeMain:(id)arg1;
- (void)windowDidResignKey:(id)arg1;
- (void)windowDidEndSheet:(id)arg1;
- (void)windowDidBecomeKey:(id)arg1;
- (BOOL)validateMenuItem:(id)arg1;
- (BOOL)validateUserInterfaceItem:(id)arg1;
- (void)logAfterFirstPageLoadsIfNeeded;
- (void)updateLoadingStatus;
- (void)updateFirstResponderOnTransitionToContinuousReadingViewPage;
- (void)updateFirstResponderOnPageLoadCommit;
- (void)updateFirstResponderOnPageLoadStart;
- (void)resetFirstResponder;
@property(readonly, nonatomic) BOOL webContentIsFirstResponder;
@property(readonly, nonatomic) BOOL nothingIsFirstResponder;
- (void)makeUnifiedFieldOrWindowFirstResponder;
@property(readonly, nonatomic) BOOL unifiedFieldIsFirstResponder;
@property(readonly, nonatomic) UnifiedField *unifiedField;
- (BOOL)canShowUnifiedField;
- (id)toolbarController;
- (void)willShowCustomizeToolbarSheet;
- (void)handleClickInWindowNotHandledByAnyView;
- (void)performBlockWhileFocusingUnifiedFieldProgrammatically:(CDUnknownBlockType)arg1;
- (void)focusContentView;
- (void)firstResponderMightHaveChanged;
- (void)windowTitleNeedsUpdate;
- (void)updateWindowSnapshotRestoration;
- (BOOL)_shouldEnableWindowSnapshotRestoration;
- (void)_browserTabsDidChange;
- (double)tabBarHeight;
- (unsigned long long)numberOfTabs;
- (unsigned long long)numberOfNonDisposableTabs;
- (void)insertPreservedTab:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)preserveTabToBeMovedToAnotherWindowLater:(id)arg1;
- (void)_notifyPageAboutBarsStatesAfterMovingToNewWindow:(struct BrowserContentViewController *)arg1;
- (void)moveTabFromOtherWindow:(id)arg1 toIndex:(unsigned long long)arg2 andSelect:(BOOL)arg3;
- (void)_moveTabViewItem:(id)arg1 toIndex:(unsigned long long)arg2 isChangingPinnedness:(BOOL)arg3;
- (void)_updateDFRForMovingTabViewItem:(id)arg1 fromIndex:(unsigned long long)arg2 toIndex:(unsigned long long)arg3 isChangingPinnedness:(BOOL)arg4;
- (void)_moveTabViewItem:(id)arg1 toIndex:(unsigned long long)arg2;
- (void)_moveTab:(id)arg1 toIndex:(unsigned long long)arg2 isChangingPinnedness:(BOOL)arg3;
- (void)moveTab:(id)arg1 toIndex:(unsigned long long)arg2;
- (void)consolidateTabViewItemsFromOtherWindows:(id)arg1;
- (void)replaceEmptyTabWithTabs:(id)arg1;
- (void)pageTypeDidChangeForBrowserContentViewController:(struct BrowserContentViewController *)arg1;
- (void)didRestorePinnedTabsWithRestorationMode:(unsigned long long)arg1;
- (void)restoreTabStates:(id)arg1 selectingTabWithIndexAfterPinnedTabsAreRestored:(unsigned long long)arg2;
- (void)restoreTabStates:(id)arg1 selectTabIndex:(unsigned long long)arg2;
- (void)replaceTabsWithStates:(id)arg1 allowGoBack:(BOOL)arg2 allowJavaScript:(BOOL)arg3 selectTabIndex:(unsigned long long)arg4;
- (void)openNewTabsWithStates:(id)arg1;
- (void)_performBatchTabInsertions:(CDUnknownBlockType)arg1;
- (void)closeWindowWithoutConfirming;
- (void)tryToCloseWindowWhenReady;
- (void)tryToCloseOtherTabs:(id)arg1;
- (void)tryToCloseOtherTabsWhenReady:(id)arg1;
- (void)closeTabWithoutConfirming:(id)arg1;
- (void)closeTabOrWindowWithoutConfirming:(id)arg1;
- (void)tryToCloseTabWhenReady:(id)arg1;
- (void)_closePageAfterChecks:(id)arg1;
- (void)_closePageAfterConfirmPageUnloadWithPIPVideo:(id)arg1;
- (void)tryToCloseTab:(id)arg1;
- (void)confirmClosingTabWithUnsavedCredentials:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)selectTabAtIndex:(unsigned long long)arg1;
- (void)selectTabViewItem:(id)arg1;
- (void)selectTab:(id)arg1;
- (BOOL)trySwitchingToPinnedTabOnNavigationToURL:(id)arg1;
- (BOOL)_shouldReloadPinnedTabAfterAutomaticallySwitchedTo:(id)arg1;
- (void)goToURLInNewProcessIfPossible:(id)arg1 withTitle:(id)arg2 windowPolicy:(long long)arg3 tabPlacementHint:(const struct TabPlacementHint *)arg4;
- (BOOL)_tryGoToURLInNewProcess:(id)arg1 withTabLabel:(id)arg2;
- (BOOL)_tryGoToURLsInNewProcess:(id)arg1 withTabLabel:(id)arg2 httpReferrer:(id)arg3;
- (void)addHistoryOperation:(id)arg1 forBackgroundLoad:(id)arg2;
- (BOOL)shouldAllowNavigationToURL:(id)arg1 forBackgroundLoad:(id)arg2;
- (BOOL)isBackgroundLoadWKView:(id)arg1;
- (id)backgroundLoadBeingCommittedIntoContentViewController:(const struct BrowserContentViewController *)arg1;
- (id)backgroundLoadWithContentViewController:(const struct BrowserContentViewController *)arg1;
- (id)backgroundLoadForCurrentBrowserContentViewController;
- (void)backgroundLoadController:(id)arg1 didCommitBackgroundLoad:(id)arg2 intoTabViewItem:(id)arg3;
- (void)backgroundLoadController:(id)arg1 willCommitBackgroundLoad:(id)arg2 wasDeferred:(BOOL)arg3;
- (void)backgroundLoadController:(id)arg1 didDeferCommitOfBackgroundLoad:(id)arg2;
- (id)backgroundLoadController:(id)arg1 destinationTabViewItemForCommittingBackgroundLoad:(id)arg2;
- (BOOL)commitBackgroundLoad:(id)arg1;
- (void)willLoadURLRequestForContentViewController:(struct BrowserContentViewController *)arg1;
- (void)cancelCommittedBackgroundLoadAndReissueLoadSoon:(id)arg1;
- (void)cancelBackgroundLoadSoonOrReissueLoadIfCommitted:(id)arg1;
- (void)cancelBackgroundLoad:(id)arg1;
- (id)_browserTabViewItemWithBackgroundNavigationBackgroundLoad:(id)arg1;
- (BOOL)backgroundLoadController:(id)arg1 handleBackgroundLoadDidPerformFirstVisuallyNonEmptyLayout:(id)arg2;
- (void)backgroundLoadController:(id)arg1 didReissueBackgroundLoad:(id)arg2;
- (void)backgroundLoadController:(id)arg1 didCancelBackgroundLoad:(id)arg2 beingCommittedIntoTabViewItem:(id)arg3;
- (void)backgroundLoadController:(id)arg1 willCancelBackgroundLoad:(id)arg2;
- (void)moveBackgroundLoad:(id)arg1 toWindowController:(id)arg2;
- (void)didFinishSettingUpBackgroundNavigationInBrowserTabViewItem:(id)arg1;
- (void)commitBackgroundLoad:(id)arg1 toDestinationTabViewItem:(id)arg2;
- (id)startSpawnedTabBackgroundLoadWithURL:(id)arg1;
- (id)_updateUniqueBackgroundLoadURLs:(id)arg1 isSpeculative:(BOOL)arg2 withTabLabel:(id)arg3 identifier:(id)arg4 httpReferrer:(id)arg5;
- (void)startUniqueBackgroundLoadWithURL:(id)arg1 identifier:(id)arg2;
- (id)backgroundLoadWithIdentifier:(id)arg1;
- (id)_beginUniqueBackgroundLoadWithURLs:(id)arg1 tabLabel:(id)arg2 isSpeculative:(BOOL)arg3 identifier:(id)arg4 httpReferrer:(id)arg5;
- (id)_backgroundLoadConfigurationForNonSpeculativeLoadInCurrentWindow;
- (id)_backgroundLoadConfigurationForSpeculativeLoadInCurrentWindow;
- (struct BrowserContentViewController *)backgroundLoadController:(id)arg1 contentViewControllerForSettingUpBackgroundLoad:(id)arg2;
- (id)createWKViewForBackgroundLoadController:(id)arg1;
- (BOOL)tryToCommitBackgroundLoadDueToEventRequiringUserIntervention:(id)arg1;
- (void)forceCommittedBackgroundLoadToBeShown:(id)arg1;
@property(readonly, nonatomic) BOOL shouldPreloadTopHit;
- (id)placeholderTextInEmptyUnpinnedRegionOfTabBarView:(id)arg1;
- (BOOL)tabBarView:(id)arg1 canDetachTabBarViewItem:(id)arg2;
- (BOOL)tabBarView:(id)arg1 canDragToPinTab:(id)arg2;
- (void)tabBarView:(id)arg1 didBeginDraggingTab:(id)arg2;
- (BOOL)_canTogglePinnedStateAllowedForTabViewItem:(id)arg1;
- (BOOL)_isPinningAllowed;
- (BOOL)tabBarView:(id)arg1 canCloseTabBarViewItem:(id)arg2;
- (void)_performTabBarDragOperationForURLs:(id)arg1 droppedAtIndex:(unsigned long long)arg2 honorWindowPolicy:(BOOL)arg3;
- (void)_performTabBarDragOperationForTabViewItem:(id)arg1 URL:(id)arg2;
- (BOOL)_handleDroppingURLs:(id)arg1 onTabButtonWithIndex:(unsigned long long)arg2;
- (BOOL)tabBarView:(id)arg1 acceptDrop:(id)arg2 index:(unsigned long long)arg3;
- (unsigned long long)tabBarView:(id)arg1 validateDrop:(id)arg2;
- (void)tabBarView:(id)arg1 didFinishTransitionAnimationForWindow:(id)arg2;
- (id)tabBarView:(id)arg1 destinationWindowForDetachedTabBarViewItem:(id)arg2;
- (id)tabBarView:(id)arg1 detachedWindowImageForDraggedTabBarViewItem:(id)arg2;
- (unsigned long long)tabBarView:(id)arg1 validateTabDrop:(id)arg2;
- (BOOL)tabBarView:(id)arg1 acceptTabDrop:(id)arg2 index:(unsigned long long)arg3;
- (id)tabBarView:(id)arg1 menuForTabBarViewItem:(id)arg2 event:(id)arg3;
- (void)tabBarView:(id)arg1 didMoveTabBarViewItem:(id)arg2 toIndex:(unsigned long long)arg3 isChangingPinnedness:(BOOL)arg4;
- (void)tabBarView:(id)arg1 closeTabBarViewItem:(id)arg2;
- (id)selectedTabBarViewItemAfterClosingCurrentTabInTabBarView:(id)arg1;
- (void)tabBarView:(id)arg1 selectTabBarViewItem:(id)arg2;
- (void)createNewTabInTabBarView:(id)arg1;
- (void)tabBarViewDidZoomIn:(id)arg1;
- (void)tabView:(id)arg1 didSelectTabViewItem:(id)arg2;
- (void)tabView:(id)arg1 willSelectTabViewItem:(id)arg2;
- (struct BrowserContentViewController *)createInactiveTabWithPosition:(int)arg1;
- (struct BrowserContentViewController *)createTabAtIndex:(unsigned long long)arg1 andSelect:(BOOL)arg2 websiteDataStore:(id)arg3;
- (struct BrowserContentViewController *)createTabAtIndex:(unsigned long long)arg1 andSelect:(BOOL)arg2;
- (struct BrowserContentViewController *)createTabWithPosition:(int)arg1;
- (unsigned long long)indexOfTabViewItem:(id)arg1;
- (unsigned long long)selectedTabIndex;
- (id)selectedTab;
- (struct SearchableWebContentViewController *)currentBrowserOrOverlayContentViewController;
- (id)tabViewItemForWKView:(id)arg1;
- (id)_tabViewItemForWKView:(id)arg1 inTabViewItems:(id)arg2;
- (void)removeFromOrderedTabViewItemsAtIndex:(unsigned int)arg1;
- (void)replaceInOrderedTabViewItems:(id)arg1 atIndex:(unsigned int)arg2;
- (void)insertInOrderedTabViewItems:(id)arg1 atIndex:(unsigned int)arg2;
- (void)insertInOrderedTabViewItems:(id)arg1;
- (id)orderedUnpinnedTabViewItems;
- (id)orderedTabViewItems;
@property(readonly, nonatomic) struct TabBarController *tabBarController;
- (void)downloadFailedToHopToDockFromPoint:(struct CGPoint)arg1;
- (void)toggleDownloadsPopover:(id)arg1;
- (BOOL)isShowingDownloadsPopover;
- (void)_clearEditedUnifiedFieldStringForSelectedTab;
@property(readonly, nonatomic) struct UnifiedFieldCompletionController *unifiedFieldCompletionController;
- (id)_unifiedFieldPlaceholderString;
- (void)showCertificateSheet:(id)arg1;
- (void)_certificateTrustSheetDidEnd:(id)arg1 returnCode:(long long)arg2 contextInfo:(void *)arg3;
- (BOOL)shouldBlockUserInteractionAfterShowingAutomationAlert;
@property(readonly, nonatomic) BOOL usesPrivateBrowsing;
- (id)dynamicForwardMenu;
- (id)dynamicBackMenu;
- (id)toolbarViewWindow;
- (void)restoreUnifiedFieldText:(id)arg1;
@property(readonly, copy, nonatomic) NSString *unifiedFieldTextForRestoring;
@property(readonly, nonatomic) BOOL unifiedFieldIsReflectingSearchTerms;
- (void)searchForString:(id)arg1 withWindowPolicy:(long long)arg2;
- (void)searchForString:(id)arg1;
@property(readonly, nonatomic) FavoritesBarView *favoritesBarView; // @synthesize favoritesBarView=_favoritesBarView;
- (BOOL)allowBookmarksChanges;
- (BOOL)isAvailableForForcedLocationUsingWindowPolicy:(long long)arg1;
- (struct CGRect)adjustedFrameForCascade:(struct CGRect)arg1 fromWindow:(id)arg2;
- (struct CGRect)adjustedFrameFromDefaults:(struct CGRect)arg1;
- (struct CGRect)adjustedFrameForSaving:(struct CGRect)arg1;
- (void)_updateTabTitlesNow;
- (id)toolbarItemExtensionTargetForToolbarController:(id)arg1;
- (void)mouseDownInVisualTabPickerButtonInToolbarController:(id)arg1;
- (void)mouseDidExitVisualTabPickerButtonInToolbarController:(id)arg1;
- (id)forwardMenuForBackForwardSegmentedControlInToolbarController:(id)arg1;
- (id)backMenuForBackForwardSegmentedControlInToolbarController:(id)arg1;
- (BOOL)shouldAllowUserCustomizationForToolbarController:(id)arg1;
- (id)_completionIconForParsecCompletionListItem:(struct CompletionListItem *)arg1;
- (PassRefPtr_46da3955)_selectedParsecCompletionListItem;
- (void)setToolbarsVisible:(BOOL)arg1;
- (BOOL)anyToolbarsVisible;
- (void)setTabBarVisible:(BOOL)arg1;
- (BOOL)isTabBarVisible;
- (void)setFavoritesBarVisibleEnteringFullScreen:(BOOL)arg1;
- (BOOL)isFavoritesBarVisibleEnteringFullScreen;
- (void)setFullScreenFavoritesBarVisible:(BOOL)arg1;
- (void)setFavoritesBarVisible:(BOOL)arg1;
- (BOOL)isFavoritesBarVisible;
- (void)setLocationBarVisible:(BOOL)arg1;
- (BOOL)isLocationBarVisible;
- (id)visibilityManagerInputContextForKeyboardMethodsBarVisibility:(id)arg1;
- (BOOL)visibilityManagerIsUnifiedFieldBeingEdited:(id)arg1;
- (BOOL)visibilityManager:(id)arg1 isBrowserContentViewControllerCurrentlyActive:(id)arg2;
- (BOOL)visibilityManagerIsCurrentWindowMain:(id)arg1;
- (BOOL)visibilityManagerWantsFavoritesInCompletionList:(id)arg1;
- (BOOL)visibilityManagerIsWindowCurrentlySwitchingTabs:(id)arg1;
- (void)dismissFavoritesPickerFromVisibilityManager:(id)arg1;
- (id)mediaPlaybackControlsViewForFunctionBarProvider:(id)arg1;
- (void)showFavoritesPickerFromVisibilityManager:(id)arg1;
- (void)didHideFavoritesPickerForFunctionBarProvider:(id)arg1;
- (void)windowFunctionBarProvider:(id)arg1 didSelectFavorite:(id)arg2;
- (void)performAutoFillFromFunctionBarProvider:(id)arg1;
- (void)toggleFavoritesBarFromFunctionBarProvider:(id)arg1;
- (void)toggleSidebarFromFunctionBarProvider:(id)arg1;
- (void)toggleHistoryFromFunctionBarProvider:(id)arg1;
- (void)goHomeFromFunctionBarProvider:(id)arg1;
- (void)toggleVisualTabPickerFromFunctionBarProvider:(id)arg1;
- (void)toggleReaderFromFunctionBarProvider:(id)arg1;
- (void)shareFromFunctionBarProvider:(id)arg1;
- (void)addBookmarkFromFunctionBarProvider:(id)arg1;
- (void)goForwardFromFunctionBarProvider:(id)arg1;
- (void)goBackFromFunctionBarProvider:(id)arg1;
- (void)openNewTabFromFunctionBarProvider:(id)arg1;
- (void)focusUnifiedFieldFromFunctionBarProvider:(id)arg1;
- (void)functionBarProvider:(id)arg1 didSelectTabAtIndex:(unsigned long long)arg2;
- (void)didEndScrubbingTabsInFunctionBarWithProvider:(id)arg1;
- (void)didBeginScrubbingTabsInFunctionBarWithProvider:(id)arg1;
- (void)didChangeFunctionBarItemsForProvider:(id)arg1;
- (void)willChangeFunctionBarItemsForProvider:(id)arg1;
- (unsigned long long)_functionBarTabIndexFromRealTabIndex:(unsigned long long)arg1 realTabOffset:(unsigned long long)arg2;
- (unsigned long long)_functionBarTabIndexFromRealTabIndex:(unsigned long long)arg1;
- (unsigned long long)_realTabIndexFromFunctionBarTabIndex:(unsigned long long)arg1 realTabOffset:(unsigned long long)arg2;
- (unsigned long long)_realTabIndexFromFunctionBarTabIndex:(unsigned long long)arg1;
- (long long)readerButtonStateForFunctionBarProvider:(id)arg1;
- (BOOL)canAutoFillFromFunctionBarProvider:(id)arg1;
- (BOOL)canToggleFavoritesBarFromFunctionBarProvider:(id)arg1;
- (BOOL)canToggleSidebarFromFunctionBarProvider:(id)arg1;
- (BOOL)canToggleHistoryFromFunctionBarProvider:(id)arg1;
- (BOOL)canGoHomeFromFunctionBarProvider:(id)arg1;
- (BOOL)canToggleVisualTabPickerFromFunctionBarProvider:(id)arg1;
- (BOOL)canToggleReaderFromFunctionBarProvider:(id)arg1;
- (BOOL)canShareFromFunctionBarProvider:(id)arg1;
- (BOOL)canAddBookmarkFromFunctionBarProvider:(id)arg1;
- (BOOL)canGoForwardFromFunctionBarProvider:(id)arg1;
- (BOOL)canGoBackFromFunctionBarProvider:(id)arg1;
- (BOOL)canOpenNewTabFromFunctionBarProvider:(id)arg1;
- (BOOL)canFocusUnifiedFieldFromFunctionBarProvider:(id)arg1;
- (id)functionBarProvider:(id)arg1 accessibilityDescriptionForTabAtIndex:(unsigned long long)arg2;
- (id)functionBarProvider:(id)arg1 thumbnailProviderForTabAtIndex:(unsigned long long)arg2;
- (unsigned long long)numberOfTabsForFunctionBarProvider:(id)arg1;
- (void)removeMediaPlaybackControlsViewForWKView:(id)arg1;
- (void)addMediaPlaybackControlsView:(id)arg1 forWKView:(id)arg2;
- (unsigned long long)_selectedFunctionBarTabIndex;
- (void)_updateFunctionBarTabThumbnailsNow;
- (void)_updateSelectedFunctionBarTabNow;
- (void)_updateFunctionBarItems;
- (id)_functionBarProviderCreatingIfNeeded;
- (id)_automationTouchBarProviderCreatingIfNeeded;
- (id)touchBar;
- (BOOL)frameAutosaveIsAllowed;
- (struct CGRect)defaultFrame;
- (void)synchronizeWindowTitleWithDocumentName;
- (void)setFrameProgrammatically:(struct CGRect)arg1;
- (BOOL)shouldCloseDocument;
- (void)setDocument:(id)arg1;
- (void)showWindow:(id)arg1;
- (BOOL)_shouldUseOpenBookmarksInTabsNewWindowBehavior;
- (void)windowDidLoad;
- (void)loadWindow;
- (BOOL)_newWindowShouldBeUnbuffered;
- (id)windowNibName;
- (void)cancel:(id)arg1;
- (void)noResponderFor:(SEL)arg1;
@property(nonatomic) BOOL ignoresOrderFront;
- (BOOL)isInteractionBlockedByModalWindow;
@property(readonly, nonatomic, getter=isClosed) BOOL closed;
- (BOOL)canCloseSelectedTab;
- (BOOL)canReloadTab:(id)arg1;
- (void)showFavorites:(id)arg1;
- (void)toggleShowFrequentlyVisitedSites:(id)arg1;
- (void)showStartPage:(id)arg1;
- (void)showTopSitesWall:(id)arg1;
- (void)_showStartPageWithMode:(int)arg1;
- (void)createWebClip:(id)arg1;
- (void)imageHopAnimationDidFinish:(id)arg1;
- (id)imageHopParentWindow;
- (void)_startHopAnimationFromPoint:(struct CGPoint)arg1 toDestination:(int)arg2 withImage:(id)arg3;
- (void)_startHopAnimationFromPoint:(struct CGPoint)arg1 withImage:(id)arg2;
- (void)startSiteIconHopAnimationToDestination:(int)arg1;
- (void)startHopAnimationFromPoint:(struct CGPoint)arg1;
- (void)startReadingListHopAnimationFromMouseLocation;
- (void)_startHopAnimationWithStartPoint:(struct CGPoint)arg1 endPoint:(struct CGPoint)arg2 image:(id)arg3;
- (void)_startReadingListHopAnimationUsingStartPoint:(struct CGPoint)arg1 withImage:(id)arg2;
- (void)startReadingListHopAnimationUsingStartPoint:(struct CGPoint)arg1;
- (void)currentWKViewDidSwipeSnapshotToRect:(struct CGRect)arg1;
- (void)navigationGestureDidEndWillNavigate:(BOOL)arg1;
- (void)navigationGestureDidBegin;
- (BOOL)_navigationGestureWillSwipeBothSidebarAndStartPage;
- (void)_cancelSidebarAnimation;
- (void)animationDidStop:(id)arg1 finished:(BOOL)arg2;
- (void)_cleanUpAfterSidebarHasHidden;
- (id)_sidebarAnimationWithKeyPath:(id)arg1 fromValue:(id)arg2 toValue:(id)arg3;
- (void)_animateShowingOrHidingSidebar:(id)arg1;
- (void)didCollectPageLayoutInformationForSidebarAnimationBeforeResize;
- (void)forceContentRepaintAndCollectPageLayoutInformationForSidebarAnimationAfterResize;
- (void)collectPageLayoutInformationForSidebarAnimationBeforeResize;
- (struct Page)_pageForSidebarAnimation;
- (void)_prepareForSidebarAnimation:(int)arg1 destinationSnapshotFrame:(struct CGRect)arg2;
- (void)_setResizableContentContainerSizeForSidebarAnimation:(id)arg1;
- (void)didForceContentRepaintAndCollectPageLayoutInformationForSidebarAnimationAfterResize:(id)arg1;
- (void)sidebarAnimationHasFinished;
- (void)_updateSidebarForStateChange:(int)arg1 viewController:(struct BrowserContentViewController *)arg2 finalContentContainerFrame:(struct CGRect)arg3 animated:(BOOL)arg4;
- (void)uninstallSidebarWithAnimation:(BOOL)arg1;
- (void)installSidebarWithAnimation:(BOOL)arg1;
- (void)uninstallSidebarFromUserGesture;
- (void)installSidebarFromUserGesture;
- (void)_setSidebarVisibilityPreference:(BOOL)arg1;
- (void)hideAllBannersForCurrentBrowserContentViewController;
- (void)hideOverlaySidebarIfNeeded;
- (id)sidebarViewController;
- (BOOL)_isReaderInstalled;
- (BOOL)isSidebarAnimationInProgress;
- (BOOL)sharedLinksSidebarIsShowing;
- (BOOL)bookmarksSidebarIsShowing;
- (BOOL)readingListSidebarIsShowing;
@property(readonly, nonatomic) BOOL sidebarAppearsAsOverlay;
- (void)toggleSharedLinksSidebar:(id)arg1;
- (void)toggleReadingListSidebar:(id)arg1;
- (void)showReadingListSidebar;
- (void)showHistoryInBookmarksView:(id)arg1;
- (void)toggleHistoryInBookmarksView:(id)arg1;
- (void)toggleBookmarksEditView:(id)arg1;
- (struct BrowserContentViewController *)_browserContentViewControllerToInstallBookmarksView;
- (void)toggleBookmarksSidebar:(id)arg1;
- (void)toggleBookmarks:(id)arg1;
- (void)showBookmarksSidebar:(id)arg1;
- (void)_showSidebar:(id)arg1;
- (void)safari_toggleSidebar:(id)arg1;
- (void)toggleMuteOtherTabs:(id)arg1;
- (void)toggleMuteCurrentTab:(id)arg1;
- (void)toggleCloudTabsPopover:(id)arg1;
- (void)showSharingServicePicker:(id)arg1;
- (void)toggleReader:(id)arg1;
- (void)toggleTabBar:(id)arg1;
- (void)toggleExtensionBar:(id)arg1;
- (void)hideFavoritesBarAfterReadingListAnimation:(id)arg1;
- (void)showFavoritesBarForReadingListAnimation:(id)arg1;
- (void)toggleFavoritesBar:(id)arg1;
- (void)_toggleLocationBar:(id)arg1 suppressToolbarConfigurationAutosave:(BOOL)arg2;
- (void)toggleLocationBar:(id)arg1;
- (id)deselectPinnedTabIfNecessary;
- (void)syncPinnedTabs;
- (void)insertUnpinnedTabIfNecessary;
- (void)insertTabsWithStates:(id)arg1 atIndex:(unsigned long long)arg2;
@property(readonly, nonatomic) NSArray *pinnedTabs;
@property(readonly, nonatomic) BOOL hasPinnedTabs;
- (void)_updatePinnedTabIconsNow:(id)arg1;
- (void)togglePinnedStateForTab:(id)arg1;
- (void)togglePinTabFromMenu:(id)arg1;
- (unsigned long long)_numberOfUnpinnedTabs;
- (unsigned long long)_firstUnpinnedTabIndex;
- (void)reloadAllTabs:(id)arg1;
- (void)reloadTabFromMenu:(id)arg1;
- (void)moveTabToNewWindowFromMenu:(id)arg1;
- (void)closeOtherTabsFromMenu:(id)arg1;
- (void)closeTabFromMenu:(id)arg1;
- (void)updateSharedLinks:(id)arg1;
- (void)reloadWithPlugIns:(id)arg1;
- (void)reloadWithoutContentBlockers:(id)arg1;
- (void)reloadObeyingUnifiedField:(id)arg1;
- (void)reloadIgnoringUnifiedField:(id)arg1;
- (void)_reloadHonoringUnifiedField:(BOOL)arg1;
- (BOOL)canReloadObeyingUnifiedField;
- (BOOL)_allowReloadMenuActions;
- (BOOL)_unifiedFieldTextIsWorthyOfHonoringOnReload;
- (void)stopLoading:(id)arg1;
- (void)stopOrReloadOrShowReaderAppearanceCustomizationPopover:(id)arg1;
- (void)selectPreviousTab:(id)arg1;
- (void)selectNextTab:(id)arg1;
- (void)attemptToShowFavoritesViewIfUnifiedFieldIsEmpty;
- (void)openLocation:(id)arg1;
- (void)selectUnifiedField:(id)arg1;
- (void)printFromToolbar:(id)arg1;
- (void)performWebSearch:(id)arg1;
- (struct BrowserContentViewController *)createNewEmptyTab;
- (void)openNewTab;
- (BOOL)shouldOpenNewTabFromFileMenu;
- (BOOL)_isTabEquivalentToNewlyCreatedTabRespectingNewTabBehavior:(id)arg1;
- (void)newTabWithinWindow:(id)arg1;
- (struct BrowserContentViewController *)_createNewTabRespectingNewTabBehavior:(BOOL)arg1 andSelect:(BOOL)arg2;
- (void)moveCurrentTabToNewWindow:(id)arg1;
- (void)zoomToStandardSize:(id)arg1;
- (void)zoomInOrOutFromSegmentedControl:(id)arg1;
- (void)makeTextSmaller:(id)arg1;
- (void)makeTextBigger:(id)arg1;
- (void)zoomOut:(id)arg1;
- (void)zoomIn:(id)arg1;
- (void)goToUnifiedFieldURL:(id)arg1;
- (void)goToActivatedCompletionListURL:(id)arg1 referrer:(id)arg2 searchState:(id)arg3 isPunchoutURL:(BOOL)arg4;
- (void)goHome:(id)arg1;
- (void)goForwardInWindow:(id)arg1;
- (void)goForwardAndFlashToolbarButton:(id)arg1;
- (void)goBackOrForwardFromSegmentedControl:(id)arg1;
- (void)goBackInWindow:(id)arg1;
- (void)_goBackInWindowUsingPolicy:(long long)arg1;
- (void)goBackAndFlashToolbarButton:(id)arg1;
- (void)closeInactiveTabs:(id)arg1;
- (void)closeCurrentTab:(id)arg1;
- (void)changeTextEncoding:(id)arg1;
- (void)autoFill:(id)arg1;
- (void)addBookmarkFolder:(id)arg1;
- (void)addBookmark:(id)arg1;
- (void)didReplaceBrowserWKViewInTab:(id)arg1;
@property(readonly, nonatomic) NSView *currentTabMainContentView;
- (id)_tabContentViewOfCurrentTab;
- (id)_resizableContentContainer;
- (struct CGSize)currentWebViewSize;
- (id)browserDocument;
- (void)userInteractedWithPageDuringSwipeGesture;
- (BOOL)isRocketEffectTestEnabled;
- (id)currentFluidProgressStateSource;
- (void)fluidProgressRocketAnimationDidComplete;
- (void)cancelFluidProgressForContentViewController:(struct BrowserContentViewController *)arg1;
- (void)startRocketEffectForContentViewController:(struct BrowserContentViewController *)arg1;
- (void)finishFluidProgressForContentViewController:(struct BrowserContentViewController *)arg1;
- (void)updateFluidProgressForContentViewController:(struct BrowserContentViewController *)arg1;
- (void)startFluidProgressForContentViewController:(struct BrowserContentViewController *)arg1;
@property(readonly, nonatomic) BrowserWindow *browserWindow;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

